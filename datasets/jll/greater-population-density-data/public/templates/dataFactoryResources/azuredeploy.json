{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The name can contain only letters, numbers and hyphens. The first and last characters must be a letter or number. Spaces are not allowed."
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The field can contain only lowercase letters and numbers. Name must be between 1 and 11 characters."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location of the data factory. Currently, only East US, East US 2, and West Europe are supported. "
            }
        },
        "doYouWantToWriteCuratedDataToSQLDatabase": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Please specify if you want to write curated data into SQL database."
            }
        },
        "serverName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. Your server name can contain only lowercase letters, numbers, and '-', but can't start or end with '-' or have more than 50 characters."
            }
        },
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "Value should not match special patterns. It should contain a length of maximum of 128."
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "Your login name must not contain a SQL Identifier or a typical system name (like admin, administrator, sa, root, dbmanager, loginmanager, etc.) or a built-in database user or role (like dbo, guest, public, etc.)"
            }
        },
        "currentTime": {
            "type": "string"
        },
        "notificationEmail": {
            "type": "string",
            "metadata": {
                "description": "Please specify comma separated email addresses on which you would like to receive the ADF pipeline alerts."
            }
        },
        "webHookUri": {
            "type": "string"

        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
              "description": "Specifies the name of the key vault."
            }
          }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]",
        "storageAccountId": "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "dataflowWithSqlName": "Transformations_With_SQL_Sink",
        "dataflowWithoutSqlName": "Transformations_Without_SQL_Sink",
        "databaseCollation": "SQL_Latin1_General_CP1_CI_AS",
        "greaterpopulationdensity_http_linkedservice_properties_typeProperties_url": "https://www2.census.gov",
        "keyVaultbaseUrl":"[concat('https://',parameters('keyVaultName'),'.vault.azure.net')]"
    },
    "resources": [
        {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[parameters('factoryName')]",
            "location": "[parameters('location')]",
            "tags": {
                "Environment": "Public",
                "AssociatedDataSet": "GreaterPopulationDensity"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "resources": [




                {
                    "name": "[concat(parameters('factoryName'), '/greaterpopulationdensity_blobstorage_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "connectionString": {
                                "type": "AzureKeyVaultSecret",
                                "store": {
                                    "referenceName": "lowerIncome_keyvault_linkedservice",
                                    "type": "LinkedServiceReference"
                                },
                                "secretName": "storageAccountConnectionString"
                            }
                        }
                    },
                    "dependsOn": [
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_keyvault_linkedservice')]",
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/greaterpopulationdensity_http_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "HttpServer",
                        "typeProperties": {
                            "url": "[variables('greaterpopulationdensity_http_linkedservice_properties_typeProperties_url')]",
                            "enableServerCertificateValidation": true,
                            "authenticationType": "Anonymous"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/greaterpopulationdensity_sql_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureSqlDatabase",
                        "typeProperties": {
                            "connectionString": "[concat('Server=tcp:',parameters('serverName'),'.database.windows.net,1433;Initial Catalog=',parameters('databaseName'),';Persist Security Info=False;User ID=',parameters('sqlAdministratorLogin'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]",
                            "password": {
                                "type": "AzureKeyVaultSecret",
                                "store": {
                                    "referenceName": "greaterpopulationdensity_keyvault_linkedservice",
                                    "type": "LinkedServiceReference"
                                },
                                "secretName": "sqlAdministratorLoginPassword"
                            }
                        }
                    },
                    "dependsOn": [
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_keyvault_linkedservice')]",
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/greaterpopulationdensity_keyvault_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureKeyVault",
                        "typeProperties": {
                            "baseUrl": "[concat('https://',parameters('keyVaultName'),'.vault.azure.net')]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/parquet_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "container": {
                                "type": "string"
                            },
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Sinks"
                        },
                        "annotations": [],
                        "type": "Parquet",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "compressionCodec": "snappy"
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/http_source_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_http_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "relativeUrl": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Sources"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "HttpServerLocation",
                                "relativeUrl": {
                                    "value": "@dataset().relativeUrl",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_http_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/csv_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            },
                            "container": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Sinks"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/json_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "container": {
                                "type": "string"
                            },
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Sinks"
                        },
                        "annotations": [],
                        "type": "Json",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": {
                                    "value": "@dataset().file",
                                    "type": "Expression"
                                },
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            }
                        },
                        "schema": {}
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/csv_source_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            },
                            "container": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Sources"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": {
                                    "value": "@dataset().file",
                                    "type": "Expression"
                                },
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/sql_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "GreaterPopulationDensity/Sinks"
                        },
                        "parameters": {
                            "tablename": {
                                "type": "string",
                                "defaultValue": "curatedTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().tableName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_sql_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/save_current_schema_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "to_detect_schema_change.csv",
                                "container": "schemas-for-comparison"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/retain_last_schema_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "to_compare_schema.csv",
                                "container": "schemas-for-comparison"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/current_csv_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "greaterpopulationdensity_raw_data.csv",
                                "folderPath": "raw/greaterpopulationdensity_data/latest",
                                "container": "public"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/save_sql_schema_to_detect_datatype_change')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "PreviousTableName": {
                                "type": "string",
                                "defaultValue": "previousTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().PreviousTableName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/retain_sql_schema_to_compare_datatype_change')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "previousTableSaveName": {
                                "type": "string",
                                "defaultValue": "previousTableSaveCopy"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().previousTableSaveName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/save_store_proc_result_table')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "greaterpopulationdensity_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "storeProcTable": {
                                "type": "string",
                                "defaultValue": "storeProcTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().storeProcTable",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/greaterpopulationdensity_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/',variables('dataflowWithoutSqlName'))]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "GreaterPopulationDensity"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkLatestCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestParquet"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkParquet"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "DropUnwantedColumns"
                                },
                                {
                                    "name": "AddNewColumns"
                                },
                                {
                                    "name": "RemoveDashes"
                                },
                                {
                                    "name": "RemoveSpaces"
                                },
                                {
                                    "name": "RemoveCommas"
                                },
                                {
                                    "name": "CapatalizeInitials"
                                },
                                {
                                    "name": "FillEmptyFields"
                                }
                            ],
                            "script": "parameters{\n\tfilename as string ('greaterpopulationdensity_curated_data'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tSUMLEV as string,\n\t\tREGION as string,\n\t\tDIVISION as string,\n\t\tSTATE as string,\n\t\tCOUNTY as string,\n\t\tSTNAME as string,\n\t\tCTYNAME as string,\n\t\tCENSUS2010POP as string,\n\t\tESTIMATESBASE2010 as string,\n\t\tPOPESTIMATE2010 as string,\n\t\tPOPESTIMATE2011 as string,\n\t\tPOPESTIMATE2012 as string,\n\t\tPOPESTIMATE2013 as string,\n\t\tPOPESTIMATE2014 as string,\n\t\tPOPESTIMATE2015 as string,\n\t\tPOPESTIMATE2016 as string,\n\t\tPOPESTIMATE2017 as string,\n\t\tPOPESTIMATE2018 as string,\n\t\tPOPESTIMATE2019 as string,\n\t\tNPOPCHG_2010 as string,\n\t\tNPOPCHG_2011 as string,\n\t\tNPOPCHG_2012 as string,\n\t\tNPOPCHG_2013 as string,\n\t\tNPOPCHG_2014 as string,\n\t\tNPOPCHG_2015 as string,\n\t\tNPOPCHG_2016 as string,\n\t\tNPOPCHG_2017 as string,\n\t\tNPOPCHG_2018 as string,\n\t\tNPOPCHG_2019 as string,\n\t\tBIRTHS2010 as string,\n\t\tBIRTHS2011 as string,\n\t\tBIRTHS2012 as string,\n\t\tBIRTHS2013 as string,\n\t\tBIRTHS2014 as string,\n\t\tBIRTHS2015 as string,\n\t\tBIRTHS2016 as string,\n\t\tBIRTHS2017 as string,\n\t\tBIRTHS2018 as string,\n\t\tBIRTHS2019 as string,\n\t\tDEATHS2010 as string,\n\t\tDEATHS2011 as string,\n\t\tDEATHS2012 as string,\n\t\tDEATHS2013 as string,\n\t\tDEATHS2014 as string,\n\t\tDEATHS2015 as string,\n\t\tDEATHS2016 as string,\n\t\tDEATHS2017 as string,\n\t\tDEATHS2018 as string,\n\t\tDEATHS2019 as string,\n\t\tNATURALINC2010 as string,\n\t\tNATURALINC2011 as string,\n\t\tNATURALINC2012 as string,\n\t\tNATURALINC2013 as string,\n\t\tNATURALINC2014 as string,\n\t\tNATURALINC2015 as string,\n\t\tNATURALINC2016 as string,\n\t\tNATURALINC2017 as string,\n\t\tNATURALINC2018 as string,\n\t\tNATURALINC2019 as string,\n\t\tINTERNATIONALMIG2010 as string,\n\t\tINTERNATIONALMIG2011 as string,\n\t\tINTERNATIONALMIG2012 as string,\n\t\tINTERNATIONALMIG2013 as string,\n\t\tINTERNATIONALMIG2014 as string,\n\t\tINTERNATIONALMIG2015 as string,\n\t\tINTERNATIONALMIG2016 as string,\n\t\tINTERNATIONALMIG2017 as string,\n\t\tINTERNATIONALMIG2018 as string,\n\t\tINTERNATIONALMIG2019 as string,\n\t\tDOMESTICMIG2010 as string,\n\t\tDOMESTICMIG2011 as string,\n\t\tDOMESTICMIG2012 as string,\n\t\tDOMESTICMIG2013 as string,\n\t\tDOMESTICMIG2014 as string,\n\t\tDOMESTICMIG2015 as string,\n\t\tDOMESTICMIG2016 as string,\n\t\tDOMESTICMIG2017 as string,\n\t\tDOMESTICMIG2018 as string,\n\t\tDOMESTICMIG2019 as string,\n\t\tNETMIG2010 as string,\n\t\tNETMIG2011 as string,\n\t\tNETMIG2012 as string,\n\t\tNETMIG2013 as string,\n\t\tNETMIG2014 as string,\n\t\tNETMIG2015 as string,\n\t\tNETMIG2016 as string,\n\t\tNETMIG2017 as string,\n\t\tNETMIG2018 as string,\n\t\tNETMIG2019 as string,\n\t\tRESIDUAL2010 as string,\n\t\tRESIDUAL2011 as string,\n\t\tRESIDUAL2012 as string,\n\t\tRESIDUAL2013 as string,\n\t\tRESIDUAL2014 as string,\n\t\tRESIDUAL2015 as string,\n\t\tRESIDUAL2016 as string,\n\t\tRESIDUAL2017 as string,\n\t\tRESIDUAL2018 as string,\n\t\tRESIDUAL2019 as string,\n\t\tGQESTIMATESBASE2010 as string,\n\t\tGQESTIMATES2010 as string,\n\t\tGQESTIMATES2011 as string,\n\t\tGQESTIMATES2012 as string,\n\t\tGQESTIMATES2013 as string,\n\t\tGQESTIMATES2014 as string,\n\t\tGQESTIMATES2015 as string,\n\t\tGQESTIMATES2016 as string,\n\t\tGQESTIMATES2017 as string,\n\t\tGQESTIMATES2018 as string,\n\t\tGQESTIMATES2019 as string,\n\t\tRBIRTH2011 as string,\n\t\tRBIRTH2012 as string,\n\t\tRBIRTH2013 as string,\n\t\tRBIRTH2014 as string,\n\t\tRBIRTH2015 as string,\n\t\tRBIRTH2016 as string,\n\t\tRBIRTH2017 as string,\n\t\tRBIRTH2018 as string,\n\t\tRBIRTH2019 as string,\n\t\tRDEATH2011 as string,\n\t\tRDEATH2012 as string,\n\t\tRDEATH2013 as string,\n\t\tRDEATH2014 as string,\n\t\tRDEATH2015 as string,\n\t\tRDEATH2016 as string,\n\t\tRDEATH2017 as string,\n\t\tRDEATH2018 as string,\n\t\tRDEATH2019 as string,\n\t\tRNATURALINC2011 as string,\n\t\tRNATURALINC2012 as string,\n\t\tRNATURALINC2013 as string,\n\t\tRNATURALINC2014 as string,\n\t\tRNATURALINC2015 as string,\n\t\tRNATURALINC2016 as string,\n\t\tRNATURALINC2017 as string,\n\t\tRNATURALINC2018 as string,\n\t\tRNATURALINC2019 as string,\n\t\tRINTERNATIONALMIG2011 as string,\n\t\tRINTERNATIONALMIG2012 as string,\n\t\tRINTERNATIONALMIG2013 as string,\n\t\tRINTERNATIONALMIG2014 as string,\n\t\tRINTERNATIONALMIG2015 as string,\n\t\tRINTERNATIONALMIG2016 as string,\n\t\tRINTERNATIONALMIG2017 as string,\n\t\tRINTERNATIONALMIG2018 as string,\n\t\tRINTERNATIONALMIG2019 as string,\n\t\tRDOMESTICMIG2011 as string,\n\t\tRDOMESTICMIG2012 as string,\n\t\tRDOMESTICMIG2013 as string,\n\t\tRDOMESTICMIG2014 as string,\n\t\tRDOMESTICMIG2015 as string,\n\t\tRDOMESTICMIG2016 as string,\n\t\tRDOMESTICMIG2017 as string,\n\t\tRDOMESTICMIG2018 as string,\n\t\tRDOMESTICMIG2019 as string,\n\t\tRNETMIG2011 as string,\n\t\tRNETMIG2012 as string,\n\t\tRNETMIG2013 as string,\n\t\tRNETMIG2014 as string,\n\t\tRNETMIG2015 as string,\n\t\tRNETMIG2016 as string,\n\t\tRNETMIG2017 as string,\n\t\tRNETMIG2018 as string,\n\t\tRNETMIG2019 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'lineage',\n\tpartitionBy('hash', 1)) ~> sourceCSV\nLoadDateAndTime select(mapColumn(\n\t\tLOADDATE,\n\t\tLOADTIME,\n\t\tSUMLEV,\n\t\tREGION,\n\t\tDIVISION,\n\t\tSTATE,\n\t\tCOUNTY,\n\t\tSTNAME,\n\t\tCTYNAME,\n\t\tCENSUS2010POP,\n\t\tESTIMATESBASE2010,\n\t\tPOPESTIMATE2010,\n\t\tPOPESTIMATE2011,\n\t\tPOPESTIMATE2012,\n\t\tPOPESTIMATE2013,\n\t\tPOPESTIMATE2014,\n\t\tPOPESTIMATE2015,\n\t\tPOPESTIMATE2016,\n\t\tPOPESTIMATE2017,\n\t\tPOPESTIMATE2018,\n\t\tPOPESTIMATE2019,\n\t\tNPOPCHG_2010,\n\t\tNPOPCHG_2011,\n\t\tNPOPCHG_2012,\n\t\tNPOPCHG_2013,\n\t\tNPOPCHG_2014,\n\t\tNPOPCHG_2015,\n\t\tNPOPCHG_2016,\n\t\tNPOPCHG_2017,\n\t\tNPOPCHG_2018,\n\t\tNPOPCHG_2019,\n\t\tBIRTHS2010,\n\t\tBIRTHS2011,\n\t\tBIRTHS2012,\n\t\tBIRTHS2013,\n\t\tBIRTHS2014,\n\t\tBIRTHS2015,\n\t\tBIRTHS2016,\n\t\tBIRTHS2017,\n\t\tBIRTHS2018,\n\t\tBIRTHS2019,\n\t\tDEATHS2010,\n\t\tDEATHS2011,\n\t\tDEATHS2012,\n\t\tDEATHS2013,\n\t\tDEATHS2014,\n\t\tDEATHS2015,\n\t\tDEATHS2016,\n\t\tDEATHS2017,\n\t\tDEATHS2018,\n\t\tDEATHS2019,\n\t\tNATURALINC2010,\n\t\tNATURALINC2011,\n\t\tNATURALINC2012,\n\t\tNATURALINC2013,\n\t\tNATURALINC2014,\n\t\tNATURALINC2015,\n\t\tNATURALINC2016,\n\t\tNATURALINC2017,\n\t\tNATURALINC2018,\n\t\tNATURALINC2019,\n\t\tINTERNATIONALMIG2010,\n\t\tINTERNATIONALMIG2011,\n\t\tINTERNATIONALMIG2012,\n\t\tINTERNATIONALMIG2013,\n\t\tINTERNATIONALMIG2014,\n\t\tINTERNATIONALMIG2015,\n\t\tINTERNATIONALMIG2016,\n\t\tINTERNATIONALMIG2017,\n\t\tINTERNATIONALMIG2018,\n\t\tINTERNATIONALMIG2019,\n\t\tDOMESTICMIG2010,\n\t\tDOMESTICMIG2011,\n\t\tDOMESTICMIG2012,\n\t\tDOMESTICMIG2013,\n\t\tDOMESTICMIG2014,\n\t\tDOMESTICMIG2015,\n\t\tDOMESTICMIG2016,\n\t\tDOMESTICMIG2017,\n\t\tDOMESTICMIG2018,\n\t\tDOMESTICMIG2019,\n\t\tNETMIG2010,\n\t\tNETMIG2011,\n\t\tNETMIG2012,\n\t\tNETMIG2013,\n\t\tNETMIG2014,\n\t\tNETMIG2015,\n\t\tNETMIG2016,\n\t\tNETMIG2017,\n\t\tNETMIG2018,\n\t\tNETMIG2019,\n\t\tRESIDUAL2010,\n\t\tRESIDUAL2011,\n\t\tRESIDUAL2012,\n\t\tRESIDUAL2013,\n\t\tRESIDUAL2014,\n\t\tRESIDUAL2015,\n\t\tRESIDUAL2016,\n\t\tRESIDUAL2017,\n\t\tRESIDUAL2018,\n\t\tRESIDUAL2019,\n\t\tGQESTIMATESBASE2010,\n\t\tGQESTIMATES2010,\n\t\tGQESTIMATES2011,\n\t\tGQESTIMATES2012,\n\t\tGQESTIMATES2013,\n\t\tGQESTIMATES2014,\n\t\tGQESTIMATES2015,\n\t\tGQESTIMATES2016,\n\t\tGQESTIMATES2017,\n\t\tGQESTIMATES2018,\n\t\tGQESTIMATES2019,\n\t\tRBIRTH2011,\n\t\tRBIRTH2012,\n\t\tRBIRTH2013,\n\t\tRBIRTH2014,\n\t\tRBIRTH2015,\n\t\tRBIRTH2016,\n\t\tRBIRTH2017,\n\t\tRBIRTH2018,\n\t\tRBIRTH2019,\n\t\tRDEATH2011,\n\t\tRDEATH2012,\n\t\tRDEATH2013,\n\t\tRDEATH2014,\n\t\tRDEATH2015,\n\t\tRDEATH2016,\n\t\tRDEATH2017,\n\t\tRDEATH2018,\n\t\tRDEATH2019,\n\t\tRNATURALINC2011,\n\t\tRNATURALINC2012,\n\t\tRNATURALINC2013,\n\t\tRNATURALINC2014,\n\t\tRNATURALINC2015,\n\t\tRNATURALINC2016,\n\t\tRNATURALINC2017,\n\t\tRNATURALINC2018,\n\t\tRNATURALINC2019,\n\t\tRINTERNATIONALMIG2011,\n\t\tRINTERNATIONALMIG2012,\n\t\tRINTERNATIONALMIG2013,\n\t\tRINTERNATIONALMIG2014,\n\t\tRINTERNATIONALMIG2015,\n\t\tRINTERNATIONALMIG2016,\n\t\tRINTERNATIONALMIG2017,\n\t\tRINTERNATIONALMIG2018,\n\t\tRINTERNATIONALMIG2019,\n\t\tRDOMESTICMIG2011,\n\t\tRDOMESTICMIG2012,\n\t\tRDOMESTICMIG2013,\n\t\tRDOMESTICMIG2014,\n\t\tRDOMESTICMIG2015,\n\t\tRDOMESTICMIG2016,\n\t\tRDOMESTICMIG2017,\n\t\tRDOMESTICMIG2018,\n\t\tRDOMESTICMIG2019,\n\t\tRNETMIG2011,\n\t\tRNETMIG2012,\n\t\tRNETMIG2013,\n\t\tRNETMIG2014,\n\t\tRNETMIG2015,\n\t\tRNETMIG2016,\n\t\tRNETMIG2017,\n\t\tRNETMIG2018,\n\t\tRNETMIG2019\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nsourceCSV derive(LOADDATE = currentDate(),\n\t\tLOADTIME = currentTimestamp()) ~> LoadDateAndTime\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestCSV\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSV\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestParquet\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkParquet"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/parquet_sink_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/',variables('dataflowWithSqlName'))]",                    
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "GreaterPopulationDensity"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkLatestCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestParquet"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkParquet"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "sql_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkSQL"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "DropUnwantedColumns"
                                },
                                {
                                    "name": "AddNewColumns"
                                },
                                {
                                    "name": "RemoveDashes"
                                },
                                {
                                    "name": "RemoveSpaces"
                                },
                                {
                                    "name": "RemoveCommas"
                                },
                                {
                                    "name": "CapatalizeInitials"
                                },
                                {
                                    "name": "FillEmptyFields"
                                }
                            ],
                            "script": "parameters{\n\tfilename as string ('greaterpopulationdensity_curated_data'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tSUMLEV as string,\n\t\tREGION as string,\n\t\tDIVISION as string,\n\t\tSTATE as string,\n\t\tCOUNTY as string,\n\t\tSTNAME as string,\n\t\tCTYNAME as string,\n\t\tCENSUS2010POP as string,\n\t\tESTIMATESBASE2010 as string,\n\t\tPOPESTIMATE2010 as string,\n\t\tPOPESTIMATE2011 as string,\n\t\tPOPESTIMATE2012 as string,\n\t\tPOPESTIMATE2013 as string,\n\t\tPOPESTIMATE2014 as string,\n\t\tPOPESTIMATE2015 as string,\n\t\tPOPESTIMATE2016 as string,\n\t\tPOPESTIMATE2017 as string,\n\t\tPOPESTIMATE2018 as string,\n\t\tPOPESTIMATE2019 as string,\n\t\tNPOPCHG_2010 as string,\n\t\tNPOPCHG_2011 as string,\n\t\tNPOPCHG_2012 as string,\n\t\tNPOPCHG_2013 as string,\n\t\tNPOPCHG_2014 as string,\n\t\tNPOPCHG_2015 as string,\n\t\tNPOPCHG_2016 as string,\n\t\tNPOPCHG_2017 as string,\n\t\tNPOPCHG_2018 as string,\n\t\tNPOPCHG_2019 as string,\n\t\tBIRTHS2010 as string,\n\t\tBIRTHS2011 as string,\n\t\tBIRTHS2012 as string,\n\t\tBIRTHS2013 as string,\n\t\tBIRTHS2014 as string,\n\t\tBIRTHS2015 as string,\n\t\tBIRTHS2016 as string,\n\t\tBIRTHS2017 as string,\n\t\tBIRTHS2018 as string,\n\t\tBIRTHS2019 as string,\n\t\tDEATHS2010 as string,\n\t\tDEATHS2011 as string,\n\t\tDEATHS2012 as string,\n\t\tDEATHS2013 as string,\n\t\tDEATHS2014 as string,\n\t\tDEATHS2015 as string,\n\t\tDEATHS2016 as string,\n\t\tDEATHS2017 as string,\n\t\tDEATHS2018 as string,\n\t\tDEATHS2019 as string,\n\t\tNATURALINC2010 as string,\n\t\tNATURALINC2011 as string,\n\t\tNATURALINC2012 as string,\n\t\tNATURALINC2013 as string,\n\t\tNATURALINC2014 as string,\n\t\tNATURALINC2015 as string,\n\t\tNATURALINC2016 as string,\n\t\tNATURALINC2017 as string,\n\t\tNATURALINC2018 as string,\n\t\tNATURALINC2019 as string,\n\t\tINTERNATIONALMIG2010 as string,\n\t\tINTERNATIONALMIG2011 as string,\n\t\tINTERNATIONALMIG2012 as string,\n\t\tINTERNATIONALMIG2013 as string,\n\t\tINTERNATIONALMIG2014 as string,\n\t\tINTERNATIONALMIG2015 as string,\n\t\tINTERNATIONALMIG2016 as string,\n\t\tINTERNATIONALMIG2017 as string,\n\t\tINTERNATIONALMIG2018 as string,\n\t\tINTERNATIONALMIG2019 as string,\n\t\tDOMESTICMIG2010 as string,\n\t\tDOMESTICMIG2011 as string,\n\t\tDOMESTICMIG2012 as string,\n\t\tDOMESTICMIG2013 as string,\n\t\tDOMESTICMIG2014 as string,\n\t\tDOMESTICMIG2015 as string,\n\t\tDOMESTICMIG2016 as string,\n\t\tDOMESTICMIG2017 as string,\n\t\tDOMESTICMIG2018 as string,\n\t\tDOMESTICMIG2019 as string,\n\t\tNETMIG2010 as string,\n\t\tNETMIG2011 as string,\n\t\tNETMIG2012 as string,\n\t\tNETMIG2013 as string,\n\t\tNETMIG2014 as string,\n\t\tNETMIG2015 as string,\n\t\tNETMIG2016 as string,\n\t\tNETMIG2017 as string,\n\t\tNETMIG2018 as string,\n\t\tNETMIG2019 as string,\n\t\tRESIDUAL2010 as string,\n\t\tRESIDUAL2011 as string,\n\t\tRESIDUAL2012 as string,\n\t\tRESIDUAL2013 as string,\n\t\tRESIDUAL2014 as string,\n\t\tRESIDUAL2015 as string,\n\t\tRESIDUAL2016 as string,\n\t\tRESIDUAL2017 as string,\n\t\tRESIDUAL2018 as string,\n\t\tRESIDUAL2019 as string,\n\t\tGQESTIMATESBASE2010 as string,\n\t\tGQESTIMATES2010 as string,\n\t\tGQESTIMATES2011 as string,\n\t\tGQESTIMATES2012 as string,\n\t\tGQESTIMATES2013 as string,\n\t\tGQESTIMATES2014 as string,\n\t\tGQESTIMATES2015 as string,\n\t\tGQESTIMATES2016 as string,\n\t\tGQESTIMATES2017 as string,\n\t\tGQESTIMATES2018 as string,\n\t\tGQESTIMATES2019 as string,\n\t\tRBIRTH2011 as string,\n\t\tRBIRTH2012 as string,\n\t\tRBIRTH2013 as string,\n\t\tRBIRTH2014 as string,\n\t\tRBIRTH2015 as string,\n\t\tRBIRTH2016 as string,\n\t\tRBIRTH2017 as string,\n\t\tRBIRTH2018 as string,\n\t\tRBIRTH2019 as string,\n\t\tRDEATH2011 as string,\n\t\tRDEATH2012 as string,\n\t\tRDEATH2013 as string,\n\t\tRDEATH2014 as string,\n\t\tRDEATH2015 as string,\n\t\tRDEATH2016 as string,\n\t\tRDEATH2017 as string,\n\t\tRDEATH2018 as string,\n\t\tRDEATH2019 as string,\n\t\tRNATURALINC2011 as string,\n\t\tRNATURALINC2012 as string,\n\t\tRNATURALINC2013 as string,\n\t\tRNATURALINC2014 as string,\n\t\tRNATURALINC2015 as string,\n\t\tRNATURALINC2016 as string,\n\t\tRNATURALINC2017 as string,\n\t\tRNATURALINC2018 as string,\n\t\tRNATURALINC2019 as string,\n\t\tRINTERNATIONALMIG2011 as string,\n\t\tRINTERNATIONALMIG2012 as string,\n\t\tRINTERNATIONALMIG2013 as string,\n\t\tRINTERNATIONALMIG2014 as string,\n\t\tRINTERNATIONALMIG2015 as string,\n\t\tRINTERNATIONALMIG2016 as string,\n\t\tRINTERNATIONALMIG2017 as string,\n\t\tRINTERNATIONALMIG2018 as string,\n\t\tRINTERNATIONALMIG2019 as string,\n\t\tRDOMESTICMIG2011 as string,\n\t\tRDOMESTICMIG2012 as string,\n\t\tRDOMESTICMIG2013 as string,\n\t\tRDOMESTICMIG2014 as string,\n\t\tRDOMESTICMIG2015 as string,\n\t\tRDOMESTICMIG2016 as string,\n\t\tRDOMESTICMIG2017 as string,\n\t\tRDOMESTICMIG2018 as string,\n\t\tRDOMESTICMIG2019 as string,\n\t\tRNETMIG2011 as string,\n\t\tRNETMIG2012 as string,\n\t\tRNETMIG2013 as string,\n\t\tRNETMIG2014 as string,\n\t\tRNETMIG2015 as string,\n\t\tRNETMIG2016 as string,\n\t\tRNETMIG2017 as string,\n\t\tRNETMIG2018 as string,\n\t\tRNETMIG2019 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\trowUrlColumn: 'lineage',\n\tpartitionBy('hash', 1)) ~> sourceCSV\nLoadDateAndTime select(mapColumn(\n\t\tLOADDATE,\n\t\tLOADTIME,\n\t\tSUMLEV,\n\t\tREGION,\n\t\tDIVISION,\n\t\tSTATE,\n\t\tCOUNTY,\n\t\tSTNAME,\n\t\tCTYNAME,\n\t\tCENSUS2010POP,\n\t\tESTIMATESBASE2010,\n\t\tPOPESTIMATE2010,\n\t\tPOPESTIMATE2011,\n\t\tPOPESTIMATE2012,\n\t\tPOPESTIMATE2013,\n\t\tPOPESTIMATE2014,\n\t\tPOPESTIMATE2015,\n\t\tPOPESTIMATE2016,\n\t\tPOPESTIMATE2017,\n\t\tPOPESTIMATE2018,\n\t\tPOPESTIMATE2019,\n\t\tNPOPCHG_2010,\n\t\tNPOPCHG_2011,\n\t\tNPOPCHG_2012,\n\t\tNPOPCHG_2013,\n\t\tNPOPCHG_2014,\n\t\tNPOPCHG_2015,\n\t\tNPOPCHG_2016,\n\t\tNPOPCHG_2017,\n\t\tNPOPCHG_2018,\n\t\tNPOPCHG_2019,\n\t\tBIRTHS2010,\n\t\tBIRTHS2011,\n\t\tBIRTHS2012,\n\t\tBIRTHS2013,\n\t\tBIRTHS2014,\n\t\tBIRTHS2015,\n\t\tBIRTHS2016,\n\t\tBIRTHS2017,\n\t\tBIRTHS2018,\n\t\tBIRTHS2019,\n\t\tDEATHS2010,\n\t\tDEATHS2011,\n\t\tDEATHS2012,\n\t\tDEATHS2013,\n\t\tDEATHS2014,\n\t\tDEATHS2015,\n\t\tDEATHS2016,\n\t\tDEATHS2017,\n\t\tDEATHS2018,\n\t\tDEATHS2019,\n\t\tNATURALINC2010,\n\t\tNATURALINC2011,\n\t\tNATURALINC2012,\n\t\tNATURALINC2013,\n\t\tNATURALINC2014,\n\t\tNATURALINC2015,\n\t\tNATURALINC2016,\n\t\tNATURALINC2017,\n\t\tNATURALINC2018,\n\t\tNATURALINC2019,\n\t\tINTERNATIONALMIG2010,\n\t\tINTERNATIONALMIG2011,\n\t\tINTERNATIONALMIG2012,\n\t\tINTERNATIONALMIG2013,\n\t\tINTERNATIONALMIG2014,\n\t\tINTERNATIONALMIG2015,\n\t\tINTERNATIONALMIG2016,\n\t\tINTERNATIONALMIG2017,\n\t\tINTERNATIONALMIG2018,\n\t\tINTERNATIONALMIG2019,\n\t\tDOMESTICMIG2010,\n\t\tDOMESTICMIG2011,\n\t\tDOMESTICMIG2012,\n\t\tDOMESTICMIG2013,\n\t\tDOMESTICMIG2014,\n\t\tDOMESTICMIG2015,\n\t\tDOMESTICMIG2016,\n\t\tDOMESTICMIG2017,\n\t\tDOMESTICMIG2018,\n\t\tDOMESTICMIG2019,\n\t\tNETMIG2010,\n\t\tNETMIG2011,\n\t\tNETMIG2012,\n\t\tNETMIG2013,\n\t\tNETMIG2014,\n\t\tNETMIG2015,\n\t\tNETMIG2016,\n\t\tNETMIG2017,\n\t\tNETMIG2018,\n\t\tNETMIG2019,\n\t\tRESIDUAL2010,\n\t\tRESIDUAL2011,\n\t\tRESIDUAL2012,\n\t\tRESIDUAL2013,\n\t\tRESIDUAL2014,\n\t\tRESIDUAL2015,\n\t\tRESIDUAL2016,\n\t\tRESIDUAL2017,\n\t\tRESIDUAL2018,\n\t\tRESIDUAL2019,\n\t\tGQESTIMATESBASE2010,\n\t\tGQESTIMATES2010,\n\t\tGQESTIMATES2011,\n\t\tGQESTIMATES2012,\n\t\tGQESTIMATES2013,\n\t\tGQESTIMATES2014,\n\t\tGQESTIMATES2015,\n\t\tGQESTIMATES2016,\n\t\tGQESTIMATES2017,\n\t\tGQESTIMATES2018,\n\t\tGQESTIMATES2019,\n\t\tRBIRTH2011,\n\t\tRBIRTH2012,\n\t\tRBIRTH2013,\n\t\tRBIRTH2014,\n\t\tRBIRTH2015,\n\t\tRBIRTH2016,\n\t\tRBIRTH2017,\n\t\tRBIRTH2018,\n\t\tRBIRTH2019,\n\t\tRDEATH2011,\n\t\tRDEATH2012,\n\t\tRDEATH2013,\n\t\tRDEATH2014,\n\t\tRDEATH2015,\n\t\tRDEATH2016,\n\t\tRDEATH2017,\n\t\tRDEATH2018,\n\t\tRDEATH2019,\n\t\tRNATURALINC2011,\n\t\tRNATURALINC2012,\n\t\tRNATURALINC2013,\n\t\tRNATURALINC2014,\n\t\tRNATURALINC2015,\n\t\tRNATURALINC2016,\n\t\tRNATURALINC2017,\n\t\tRNATURALINC2018,\n\t\tRNATURALINC2019,\n\t\tRINTERNATIONALMIG2011,\n\t\tRINTERNATIONALMIG2012,\n\t\tRINTERNATIONALMIG2013,\n\t\tRINTERNATIONALMIG2014,\n\t\tRINTERNATIONALMIG2015,\n\t\tRINTERNATIONALMIG2016,\n\t\tRINTERNATIONALMIG2017,\n\t\tRINTERNATIONALMIG2018,\n\t\tRINTERNATIONALMIG2019,\n\t\tRDOMESTICMIG2011,\n\t\tRDOMESTICMIG2012,\n\t\tRDOMESTICMIG2013,\n\t\tRDOMESTICMIG2014,\n\t\tRDOMESTICMIG2015,\n\t\tRDOMESTICMIG2016,\n\t\tRDOMESTICMIG2017,\n\t\tRDOMESTICMIG2018,\n\t\tRDOMESTICMIG2019,\n\t\tRNETMIG2011,\n\t\tRNETMIG2012,\n\t\tRNETMIG2013,\n\t\tRNETMIG2014,\n\t\tRNETMIG2015,\n\t\tRNETMIG2016,\n\t\tRNETMIG2017,\n\t\tRNETMIG2018,\n\t\tRNETMIG2019\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nsourceCSV derive(LOADDATE = currentDate(),\n\t\tLOADTIME = currentTimestamp()) ~> LoadDateAndTime\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestCSV\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkCSV\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestParquet\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkParquet\nDropUnwantedColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSQL"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/parquet_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/sql_sink_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/GreaterPopulationDensity_Without_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "To Raw Partition",
                                "description": "",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "To Raw Overwrite",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Reformat Columns",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "Transformations_Without_SQL_Sink",
                                        "type": "DataFlowReference",
                                        "parameters": {
                                            "filename": {
                                                "value": "'@{pipeline().parameters.filename}'",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "'@{pipeline().RunId}'",
                                                "type": "Expression"
                                            }
                                        },
                                        "datasetParameters": {
                                            "sourceCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "SinkLatestCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.filename,'.csv')",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "sinkLatestJsonl": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "SinkCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow",
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "sinkJsonl": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            },
                                            "sinkLatestParquet": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            },
                                            "sinkParquet": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            }
                                        }
                                    },
                                    "staging": {},
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    },
                                    "traceLevel": "Fine"
                                }
                            },
                            {
                                "name": "JSONL to JSON LATEST",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "JSONL to JSON",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "JsonReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Retain Previous Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_last_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Previous Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Get_Metadata_Of_Last_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Get_Metadata_Of_Current_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Current Schema Has Less Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 1",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has Less Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has More Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Current_CSV').output.columnCount,activity('Get_Metadata_Of_Last_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 2",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has More Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has Same Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@and(equals(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount),not(equals(activity('Get_Metadata_Of_Last_CSV').output.structure,activity('Get_Metadata_Of_Current_CSV').output.structure)))",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 3",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Equal Number But Different Names Or Arrangement",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        "parameters": {
                            "sourceFilename": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity_raw_data"
                            },
                            "sourceRelativeUrl": {
                                "type": "string",
                                "defaultValue": "/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv"
                            },
                            "blobContainer": {
                                "type": "string",
                                "defaultValue": "public"
                            },
                            "rawBlobDirectory": {
                                "type": "string",
                                "defaultValue": "raw/greaterpopulationdensity_data"
                            },
                            "curatedBlobDirectory": {
                                "type": "string",
                                "defaultValue": "curated/greaterpopulationdensity_data"
                            },
                            "filename": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity_curated_data"
                            }
                        },
                        "folder": {
                            "name": "GreaterPopulationDensity/BlobStorageDataExtraction"
                        },
                        "annotations": [
                            "greaterpopulationdensity"
                        ],
                        "lastPublishTime": "2021-02-22T09:06:22Z"
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/http_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/dataflows/',variables('dataflowWithoutSqlName'))]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/save_current_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_last_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/current_csv_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/GreaterPopulationDensity_With_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "To Raw Partition",
                                "description": "",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "To Raw Overwrite",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Reformat Columns",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Create Schema if not exists",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "Transformations_With_SQL_Sink",
                                        "type": "DataFlowReference",
                                        "parameters": {
                                            "filename": {
                                                "value": "'@{pipeline().parameters.filename}'",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "'@{pipeline().RunId}'",
                                                "type": "Expression"
                                            }
                                        },
                                        "datasetParameters": {
                                            "sourceCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "SinkLatestCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.filename,'.csv')",
                                                    "type": "Expression"
                                                },
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "sinkLatestJsonl": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                    "type": "Expression"
                                                }
                                            },
                                            "SinkCSV": {
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow",
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                }
                                            },
                                            "sinkJsonl": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            },
                                            "sinkLatestParquet": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            },
                                            "sinkParquet": {
                                                "container": {
                                                    "value": "@pipeline().parameters.blobContainer",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                    "type": "Expression"
                                                },
                                                "file": "specified in data flow"
                                            },
                                            "sinkSQL": {}
                                        }
                                    },
                                    "staging": {},
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    },
                                    "traceLevel": "Fine"
                                }
                            },
                            {
                                "name": "JSONL to JSON LATEST",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "JSONL to JSON",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "JsonReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Retain Previous Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_last_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Previous Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Get_Metadata_Of_Last_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Get_Metadata_Of_Current_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Current Schema Has Less Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 1",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has Less Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has More Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Current_CSV').output.columnCount,activity('Get_Metadata_Of_Last_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 2",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has More Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has Same Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@and(equals(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount),not(equals(activity('Get_Metadata_Of_Last_CSV').output.structure,activity('Get_Metadata_Of_Current_CSV').output.structure)))",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 3",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Equal Number But Different Names Or Arrangement",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Sql Data Type change detection",
                                "type": "SqlServerStoredProcedure",
                                "dependsOn": [
                                    {
                                        "activity": "CreateStoreProcedureIfNotExists",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "storedProcedureName": "greaterpopulationdensity.DataTypeChangedProc"
                                },
                                "linkedServiceName": {
                                    "referenceName": "greaterpopulationdensity_sql_linkedservice",
                                    "type": "LinkedServiceReference"
                                }
                            },
                            {
                                "name": "Get Changed Data Type Columns",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Sql Data Type change detection",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "select * from greaterpopulationdensity.storeProcTable",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "greaterpopulationdensity"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "IfDataTypeChangedAlert",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get Changed Data Type Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get Changed Data Type Columns').output.count,0)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "WaitFalseNotChangedDataType",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "WaitTrueChangedDataType",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "CreateStoreProcedureIfNotExists",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'greaterpopulationdensity')\nBEGIN\nEXEC('CREATE SCHEMA greaterpopulationdensity')\nEND\nIF NOT EXISTS (\n    select * \n    from sys.objects \n    WHERE object_id = OBJECT_ID(N'[greaterpopulationdensity].[DataTypeChangedProc]')\n    )\nBEGIN\n    EXEC('CREATE PROCEDURE greaterpopulationdensity.DataTypeChangedProc AS IF OBJECT_ID(''greaterpopulationdensity.storeProcTable'', ''u'') IS NOT NULL DROP TABLE greaterpopulationdensity.storeProcTable; CREATE TABLE greaterpopulationdensity.storeProcTable( table1_name varchar(255), Column1_name varchar(255), DATA_TYPE1 varchar(255), table2_name varchar(255), Column2_name varchar(255), DATA_TYPE2 varchar(255) ); INSERT INTO greaterpopulationdensity.storeProcTable SELECT c1.table_name, c1.COLUMN_NAME, c1.DATA_TYPE, c2.table_name, c2.COLUMN_NAME, c2.DATA_TYPE FROM [INFORMATION_SCHEMA].[COLUMNS] c1 INNER JOIN [INFORMATION_SCHEMA].[COLUMNS] c2 ON (c1.COLUMN_NAME = c2.COLUMN_NAME AND c1.data_type <> c2.DATA_TYPE) WHERE c1.table_name=''curatedTable'' AND c2.table_name = ''previousTable'';')\n    select Count(*) from sys.symmetric_keys;\nEND\n\nELSE\n\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "greaterpopulationdensity"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "Create Schema if not exists",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'greaterpopulationdensity')\nBEGIN\nEXEC('CREATE SCHEMA greaterpopulationdensity')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "greaterpopulationdensity"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "Retain Last Sql Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "IfDataTypeChangedAlert",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "sink": {
                                        "type": "AzureSqlSink",
                                        "preCopyScript": "IF OBJECT_ID('[greaterpopulationdensity].[previousTableSaveCopy]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [greaterpopulationdensity].[previousTableSaveCopy];\n\nEND",
                                        "tableOption": "autoCreate",
                                        "disableMetricsCollection": false
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_sql_schema_to_detect_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_sql_schema_to_compare_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Sql Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Last Sql Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "sink": {
                                        "type": "AzureSqlSink",
                                        "preCopyScript": "IF OBJECT_ID('[greaterpopulationdensity].[previousTable]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [greaterpopulationdensity].[previousTable]; \n\nEND",
                                        "tableOption": "autoCreate",
                                        "disableMetricsCollection": false
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "sql_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_sql_schema_to_detect_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            }
                        ],
                        "parameters": {
                            "sourceFilename": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity_raw_data"
                            },
                            "sourceRelativeUrl": {
                                "type": "string",
                                "defaultValue": "/programs-surveys/popest/datasets/2010-2020/national/totals/nst-est2020.csv"
                            },
                            "blobContainer": {
                                "type": "string",
                                "defaultValue": "public"
                            },
                            "rawBlobDirectory": {
                                "type": "string",
                                "defaultValue": "raw/greaterpopulationdensity_data"
                            },
                            "curatedBlobDirectory": {
                                "type": "string",
                                "defaultValue": "curated/greaterpopulationdensity_data"
                            },
                            "filename": {
                                "type": "string",
                                "defaultValue": "greaterpopulationdensity_curated_data"
                            }
                        },
                        "variables": {},
                        "folder": {
                            "name": "GreaterPopulationDensity/BlobStorageAndSqlDataExtraction"
                        },
                        "annotations": [
                            "greaterpopulationdensity"
                        ],
                        "lastPublishTime": "2021-02-22T09:06:22Z"
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/http_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/dataflows/',variables('dataflowWithSqlName'))]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/save_current_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_last_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/current_csv_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_sql_schema_to_compare_datatype_change')]",
                        "[concat(variables('factoryId'), '/datasets/save_sql_schema_to_detect_datatype_change')]",
                        "[concat(variables('factoryId'), '/datasets/save_store_proc_result_table')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/GreaterPopulationDensity_Trigger_With_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "GreaterPopulationDensity_With_Sql_Sink",
                                    "type": "PipelineReference"
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('currentTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/pipelines/GreaterPopulationDensity_With_Sql_Sink')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/GreaterPopulationDensity_Trigger_Without_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "GreaterPopulationDensity_Without_Sql_Sink",
                                    "type": "PipelineReference"
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('currentTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/pipelines/GreaterPopulationDensity_Without_Sql_Sink')]"
                    ]
                },
                {
                    "type": "Microsoft.Insights/actionGroups",
                    "apiVersion": "2018-03-01",
                    "name": "NotificationAlertFromADF",
                    "location": "Global",
                    "properties": {
                        "groupShortName": "ADFalerts",
                        "enabled": true,
                        "emailReceivers": [
                            {
                                "name": "notifEmail",
                                "emailAddress": "[parameters('notificationEmail')]"
                            }
                        ],
                        "webhookReceivers": [
                            {
                                "name": "TeamsNotify",
                                "serviceUri": "[parameters('webHookUri')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithLessColumnsAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has less column(s) than the schema of the same source previously detected.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Current Schema Has Less Columns"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "GreaterPopulationDensity_Without_Sql_Sink",
                                                "GreaterPopulationDensity_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithMoreColumnsAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has more column(s) than the schema of the same source previously detected.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Current Schema Has More Columns"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "GreaterPopulationDensity_Without_Sql_Sink",
                                                "GreaterPopulationDensity_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has same number of columns as the schema of the same source previously detected but either the arrangement of the columns is different or one or more columns have different names.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Equal Number But Different Names Or Arrangement"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "GreaterPopulationDensity_Without_Sql_Sink",
                                                "GreaterPopulationDensity_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {   "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "DataTypeChangeAlert",
                    "location": "global",
                    "properties": {
                        "description": "Change in data type for one or more column(s) has been detected in the sql table",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "WaitTrueChangedDataType"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "GreaterPopulationDensity_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlPipelineFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlPipelineCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlActivityFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlActivityCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for activity run cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlTriggerCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Trigger_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "GreaterPopulationDensityWithoutSqlTriggerFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for trigger failed runs",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Trigger_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationWithoutSQL",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlActivityFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlPipelineFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlTriggerFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlTriggerCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlActivityCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithoutSqlPipelineCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithLessColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithMoreColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert')]"  
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF",
                        "GreaterPopulationDensityWithoutSqlPipelineFailedAlertConfig",
                        "GreaterPopulationDensityWithoutSqlActivityFailedAlertConfig",
                        "GreaterPopulationDensityWithoutSqlTriggerFailedAlertConfig",
                        "GreaterPopulationDensityWithoutSqlTriggerCancelledAlertConfig",
                        "GreaterPopulationDensityWithoutSqlActivityCancelledAlertConfig",
                        "GreaterPopulationDensityWithoutSqlPipelineCancelledAlertConfig"

                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlPipelineFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlPipelineCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlActivityFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON", "Create Schema if not exists" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlActivityCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for activity cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON", "Create Schema if not exists" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlTriggerFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline trigger failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Trigger_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "GreaterPopulationDensityWithSqlTriggerCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {
                        "Environment": "Public",
                        "AssociatedDataSet": "GreaterPopulationDensity"
                    },
                    "properties": {
                        "description": "Metric alert for pipeline trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "GreaterPopulationDensity_Trigger_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationWithSQL",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlActivityFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlPipelineFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlPipelineCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlActivityCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlTriggerFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'GreaterPopulationDensityWithSqlTriggerCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithLessColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithMoreColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'DataTypeChangeAlert')]"
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF",
                        "GreaterPopulationDensityWithSqlPipelineFailedAlertConfig",
                        "GreaterPopulationDensityWithSqlActivityFailedAlertConfig",
                        "GreaterPopulationDensityWithSqlActivityCancelledAlertConfig",
                        "GreaterPopulationDensityWithSqlPipelineCancelledAlertConfig",
                        "GreaterPopulationDensityWithSqlTriggerCancelledAlertConfig",
                        "GreaterPopulationDensityWithSqlTriggerFailedAlertConfig"
                    ]
                }

            ]
        }
    ],
    "outputs": {}
}