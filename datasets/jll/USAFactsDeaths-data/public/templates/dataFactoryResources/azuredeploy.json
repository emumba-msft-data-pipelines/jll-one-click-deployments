{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The name can contain only letters, numbers and hyphens. The first and last characters must be a letter or number. Spaces are not allowed."
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The field can contain only lowercase letters and numbers. Name must be between 1 and 11 characters."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location of the data factory. Currently, only East US, East US 2, and West Europe are supported. "
            }
        },
        "doYouWantToWriteCuratedDataToSQLDatabase": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Please specify if you want to write curated data into SQL database."
            }
        },
        "serverName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. Your server name can contain only lowercase letters, numbers, and '-', but can't start or end with '-' or have more than 50 characters."
            }
        },
        "databaseName": {
            "type": "string",
            "metadata": {
                "description": "Value should not match special patterns. It should contain a length of maximum of 128."
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "Your login name must not contain a SQL Identifier or a typical system name (like admin, administrator, sa, root, dbmanager, loginmanager, etc.) or a built-in database user or role (like dbo, guest, public, etc.)"
            }
        },
        "currentTime": {
            "type": "string"
        },
        "notificationEmail": {
            "type": "string",
            "metadata": {
                "description": "Please specify comma separated email addresses on which you would like to receive the ADF pipeline alerts."
            }
        },
        "webHookUri": {
            "type": "string"

        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
              "description": "Specifies the name of the key vault."
            }
          }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]",
        "storageAccountId": "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName'))]",
        "dataflowWithSqlName": "Transformations_With_SQL_Sink",
        "dataflowWithoutSqlName": "Transformations_Without_SQL_Sink",
        "databaseCollation": "SQL_Latin1_General_CP1_CI_AS",
        "USAFacts_http_linkedservice_properties_typeProperties_url": "https://static.usafacts.org",
        "keyVaultbaseUrl":"[concat('https://',parameters('keyVaultName'),'.vault.azure.net')]"
    },
    "resources": [
        {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[parameters('factoryName')]",
            "location": "[parameters('location')]",
            "tags": {
                "Environment": "Public",
                "AssociatedDataSet": "USAFactsDeaths"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "resources": [




                {
                    "name": "[concat(parameters('factoryName'), '/USAFacts_blobstorage_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',concat(listKeys(variables('storageAccountId'),'2015-05-01-preview').key1))]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/USAFacts_http_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "HttpServer",
                        "typeProperties": {
                            "url": "[variables('USAFacts_http_linkedservice_properties_typeProperties_url')]",
                            "enableServerCertificateValidation": true,
                            "authenticationType": "Anonymous"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_sql_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureSqlDatabase",
                        "typeProperties": {
                            "connectionString": "[concat('Server=tcp:',parameters('serverName'),'.database.windows.net,1433;Initial Catalog=',parameters('databaseName'),';Persist Security Info=False;User ID=',parameters('sqlAdministratorLogin'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]",
                            "password": {
                                "type": "AzureKeyVaultSecret",
                                "store": {
                                    "referenceName": "USAFacts_keyvault_linkedservice",
                                    "type": "LinkedServiceReference"
                                },
                                "secretName": "sqlAdministratorLoginPassword"
                            }
                        }
                    },
                    "dependsOn": [
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_keyvault_linkedservice')]",
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_keyvault_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureKeyVault",
                        "typeProperties": {
                            "baseUrl": "[concat('https://',parameters('keyVaultName'),'.vault.azure.net')]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/parquet_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "container": {
                                "type": "string"
                            },
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Sinks"
                        },
                        "annotations": [],
                        "type": "Parquet",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "compressionCodec": "snappy"
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/http_source_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_http_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "relativeUrl": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Sources"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "HttpServerLocation",
                                "relativeUrl": {
                                    "value": "@dataset().relativeUrl",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_http_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/csv_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            },
                            "container": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Sinks"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/json_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "container": {
                                "type": "string"
                            },
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Sinks"
                        },
                        "annotations": [],
                        "type": "Json",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": {
                                    "value": "@dataset().file",
                                    "type": "Expression"
                                },
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            }
                        },
                        "schema": {}
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/csv_source_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "directory": {
                                "type": "string"
                            },
                            "file": {
                                "type": "string"
                            },
                            "container": {
                                "type": "string"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Sources"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": {
                                    "value": "@dataset().file",
                                    "type": "Expression"
                                },
                                "folderPath": {
                                    "value": "@dataset().directory",
                                    "type": "Expression"
                                },
                                "container": {
                                    "value": "@dataset().container",
                                    "type": "Expression"
                                }
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/sql_sink_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "USAFacts/Sinks"
                        },
                        "parameters": {
                            "tablename": {
                                "type": "string",
                                "defaultValue": "curatedTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "USAFacts"
                            }
                        },
                        "linkedServiceName": {
                            "referenceName": "USAFacts_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().tableName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_sql_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/save_current_schema_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "to_detect_schema_change.csv",
                                "container": "schemas-for-comparison"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/retain_last_schema_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "to_compare_schema.csv",
                                "container": "schemas-for-comparison"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "name": "[concat(parameters('factoryName'), '/current_csv_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_blobstorage_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "USAFacts_raw_data.csv",
                                "folderPath": "raw/USAFacts_data/latest",
                                "container": "public"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_blobstorage_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/save_sql_schema_to_detect_datatype_change')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "PreviousTableName": {
                                "type": "string",
                                "defaultValue": "previousTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "USAFacts"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().PreviousTableName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/retain_sql_schema_to_compare_datatype_change')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "previousTableSaveName": {
                                "type": "string",
                                "defaultValue": "previousTableSaveCopy"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "USAFacts"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().previousTableSaveName",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/save_store_proc_result_table')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "USAFacts_sql_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "parameters": {
                            "storeProcTable": {
                                "type": "string",
                                "defaultValue": "storeProcTable"
                            },
                            "schemaName": {
                                "type": "string",
                                "defaultValue": "USAFacts"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/Schema"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": {
                                "value": "@dataset().schemaName",
                                "type": "Expression"
                            },
                            "table": {
                                "value": "@dataset().storeProcTable",
                                "type": "Expression"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/linkedServices/USAFacts_sql_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/',variables('dataflowWithoutSqlName'))]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "USAFacts"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkLatestParquet"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkParquet"
                                }
                            ],
                             "transformations": [
                                {
                                    "name": "RemoveSpaces"
                                },
                                {
                                    "name": "ConvertSchema"
                                },
                                {
                                    "name": "UnpivotDataColumnsToRows"
                                },
                                {
                                    "name": "Capitalize"
                                },
                                {
                                    "name": "AddNewColumns"
                                },
                                {
                                    "name": "RearrangeColumns"
                                },
                                {
                                    "name": "FillEmptyFields"
                                }
                            ],
                             "script": "parameters{\n\tfilename as string ('USAFacts_curated_data'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tcountyFIPS as short,\n\t\t{County Name} as string,\n\t\tState as string,\n\t\tStateFIPS as short,\n\t\t{2020-01-22} as integer,\n\t\t{2020-01-23} as integer,\n\t\t{2020-01-24} as integer,\n\t\t{2020-01-25} as integer,\n\t\t{2020-01-26} as integer,\n\t\t{2020-01-27} as integer,\n\t\t{2020-01-28} as integer,\n\t\t{2020-01-29} as integer,\n\t\t{2020-01-30} as integer,\n\t\t{2020-01-31} as integer,\n\t\t{2020-02-01} as integer,\n\t\t{2020-02-02} as integer,\n\t\t{2020-02-03} as integer,\n\t\t{2020-02-04} as integer,\n\t\t{2020-02-05} as integer,\n\t\t{2020-02-06} as integer,\n\t\t{2020-02-07} as integer,\n\t\t{2020-02-08} as integer,\n\t\t{2020-02-09} as integer,\n\t\t{2020-02-10} as integer,\n\t\t{2020-02-11} as integer,\n\t\t{2020-02-12} as integer,\n\t\t{2020-02-13} as integer,\n\t\t{2020-02-14} as integer,\n\t\t{2020-02-15} as integer,\n\t\t{2020-02-16} as integer,\n\t\t{2020-02-17} as integer,\n\t\t{2020-02-18} as integer,\n\t\t{2020-02-19} as integer,\n\t\t{2020-02-20} as integer,\n\t\t{2020-02-21} as integer,\n\t\t{2020-02-22} as integer,\n\t\t{2020-02-23} as integer,\n\t\t{2020-02-24} as integer,\n\t\t{2020-02-25} as integer,\n\t\t{2020-02-26} as integer,\n\t\t{2020-02-27} as integer,\n\t\t{2020-02-28} as integer,\n\t\t{2020-02-29} as integer,\n\t\t{2020-03-01} as integer,\n\t\t{2020-03-02} as integer,\n\t\t{2020-03-03} as integer,\n\t\t{2020-03-04} as integer,\n\t\t{2020-03-05} as integer,\n\t\t{2020-03-06} as integer,\n\t\t{2020-03-07} as integer,\n\t\t{2020-03-08} as integer,\n\t\t{2020-03-09} as integer,\n\t\t{2020-03-10} as integer,\n\t\t{2020-03-11} as integer,\n\t\t{2020-03-12} as integer,\n\t\t{2020-03-13} as integer,\n\t\t{2020-03-14} as integer,\n\t\t{2020-03-15} as integer,\n\t\t{2020-03-16} as integer,\n\t\t{2020-03-17} as integer,\n\t\t{2020-03-18} as integer,\n\t\t{2020-03-19} as integer,\n\t\t{2020-03-20} as integer,\n\t\t{2020-03-21} as integer,\n\t\t{2020-03-22} as integer,\n\t\t{2020-03-23} as integer,\n\t\t{2020-03-24} as integer,\n\t\t{2020-03-25} as integer,\n\t\t{2020-03-26} as integer,\n\t\t{2020-03-27} as integer,\n\t\t{2020-03-28} as integer,\n\t\t{2020-03-29} as integer,\n\t\t{2020-03-30} as integer,\n\t\t{2020-03-31} as integer,\n\t\t{2020-04-01} as integer,\n\t\t{2020-04-02} as integer,\n\t\t{2020-04-03} as integer,\n\t\t{2020-04-04} as integer,\n\t\t{2020-04-05} as integer,\n\t\t{2020-04-06} as integer,\n\t\t{2020-04-07} as integer,\n\t\t{2020-04-08} as integer,\n\t\t{2020-04-09} as integer,\n\t\t{2020-04-10} as integer,\n\t\t{2020-04-11} as integer,\n\t\t{2020-04-12} as integer,\n\t\t{2020-04-13} as integer,\n\t\t{2020-04-14} as integer,\n\t\t{2020-04-15} as integer,\n\t\t{2020-04-16} as integer,\n\t\t{2020-04-17} as integer,\n\t\t{2020-04-18} as integer,\n\t\t{2020-04-19} as integer,\n\t\t{2020-04-20} as integer,\n\t\t{2020-04-21} as integer,\n\t\t{2020-04-22} as integer,\n\t\t{2020-04-23} as integer,\n\t\t{2020-04-24} as integer,\n\t\t{2020-04-25} as integer,\n\t\t{2020-04-26} as integer,\n\t\t{2020-04-27} as integer,\n\t\t{2020-04-28} as integer,\n\t\t{2020-04-29} as integer,\n\t\t{2020-04-30} as integer,\n\t\t{2020-05-01} as integer,\n\t\t{2020-05-02} as integer,\n\t\t{2020-05-03} as integer,\n\t\t{2020-05-04} as integer,\n\t\t{2020-05-05} as integer,\n\t\t{2020-05-06} as integer,\n\t\t{2020-05-07} as integer,\n\t\t{2020-05-08} as integer,\n\t\t{2020-05-09} as integer,\n\t\t{2020-05-10} as integer,\n\t\t{2020-05-11} as integer,\n\t\t{2020-05-12} as integer,\n\t\t{2020-05-13} as integer,\n\t\t{2020-05-14} as integer,\n\t\t{2020-05-15} as integer,\n\t\t{2020-05-16} as integer,\n\t\t{2020-05-17} as integer,\n\t\t{2020-05-18} as integer,\n\t\t{2020-05-19} as integer,\n\t\t{2020-05-20} as integer,\n\t\t{2020-05-21} as integer,\n\t\t{2020-05-22} as integer,\n\t\t{2020-05-23} as integer,\n\t\t{2020-05-24} as integer,\n\t\t{2020-05-25} as integer,\n\t\t{2020-05-26} as integer,\n\t\t{2020-05-27} as integer,\n\t\t{2020-05-28} as integer,\n\t\t{2020-05-29} as integer,\n\t\t{2020-05-30} as integer,\n\t\t{2020-05-31} as integer,\n\t\t{2020-06-01} as integer,\n\t\t{2020-06-02} as integer,\n\t\t{2020-06-03} as integer,\n\t\t{2020-06-04} as integer,\n\t\t{2020-06-05} as integer,\n\t\t{2020-06-06} as integer,\n\t\t{2020-06-07} as integer,\n\t\t{2020-06-08} as integer,\n\t\t{2020-06-09} as integer,\n\t\t{2020-06-10} as integer,\n\t\t{2020-06-11} as integer,\n\t\t{2020-06-12} as integer,\n\t\t{2020-06-13} as integer,\n\t\t{2020-06-14} as integer,\n\t\t{2020-06-15} as integer,\n\t\t{2020-06-16} as integer,\n\t\t{2020-06-17} as integer,\n\t\t{2020-06-18} as integer,\n\t\t{2020-06-19} as integer,\n\t\t{2020-06-20} as integer,\n\t\t{2020-06-21} as integer,\n\t\t{2020-06-22} as integer,\n\t\t{2020-06-23} as integer,\n\t\t{2020-06-24} as integer,\n\t\t{2020-06-25} as integer,\n\t\t{2020-06-26} as integer,\n\t\t{2020-06-27} as integer,\n\t\t{2020-06-28} as integer,\n\t\t{2020-06-29} as integer,\n\t\t{2020-06-30} as integer,\n\t\t{2020-07-01} as integer,\n\t\t{2020-07-02} as integer,\n\t\t{2020-07-03} as integer,\n\t\t{2020-07-04} as integer,\n\t\t{2020-07-05} as integer,\n\t\t{2020-07-06} as integer,\n\t\t{2020-07-07} as integer,\n\t\t{2020-07-08} as integer,\n\t\t{2020-07-09} as integer,\n\t\t{2020-07-10} as integer,\n\t\t{2020-07-11} as integer,\n\t\t{2020-07-12} as integer,\n\t\t{2020-07-13} as integer,\n\t\t{2020-07-14} as integer,\n\t\t{2020-07-15} as integer,\n\t\t{2020-07-16} as integer,\n\t\t{2020-07-17} as integer,\n\t\t{2020-07-18} as integer,\n\t\t{2020-07-19} as integer,\n\t\t{2020-07-20} as integer,\n\t\t{2020-07-21} as integer,\n\t\t{2020-07-22} as integer,\n\t\t{2020-07-23} as integer,\n\t\t{2020-07-24} as integer,\n\t\t{2020-07-25} as integer,\n\t\t{2020-07-26} as integer,\n\t\t{2020-07-27} as integer,\n\t\t{2020-07-28} as integer,\n\t\t{2020-07-29} as integer,\n\t\t{2020-07-30} as integer,\n\t\t{2020-07-31} as integer,\n\t\t{2020-08-01} as integer,\n\t\t{2020-08-02} as integer,\n\t\t{2020-08-03} as integer,\n\t\t{2020-08-04} as integer,\n\t\t{2020-08-05} as integer,\n\t\t{2020-08-06} as integer,\n\t\t{2020-08-07} as integer,\n\t\t{2020-08-08} as integer,\n\t\t{2020-08-09} as integer,\n\t\t{2020-08-10} as integer,\n\t\t{2020-08-11} as integer,\n\t\t{2020-08-12} as integer,\n\t\t{2020-08-13} as integer,\n\t\t{2020-08-14} as integer,\n\t\t{2020-08-15} as integer,\n\t\t{2020-08-16} as integer,\n\t\t{2020-08-17} as integer,\n\t\t{2020-08-18} as integer,\n\t\t{2020-08-19} as integer,\n\t\t{2020-08-20} as integer,\n\t\t{2020-08-21} as integer,\n\t\t{2020-08-22} as integer,\n\t\t{2020-08-23} as integer,\n\t\t{2020-08-24} as integer,\n\t\t{2020-08-25} as integer,\n\t\t{2020-08-26} as integer,\n\t\t{2020-08-27} as integer,\n\t\t{2020-08-28} as integer,\n\t\t{2020-08-29} as integer,\n\t\t{2020-08-30} as integer,\n\t\t{2020-08-31} as integer,\n\t\t{2020-09-01} as integer,\n\t\t{2020-09-02} as integer,\n\t\t{2020-09-03} as integer,\n\t\t{2020-09-04} as integer,\n\t\t{2020-09-05} as integer,\n\t\t{2020-09-06} as integer,\n\t\t{2020-09-07} as integer,\n\t\t{2020-09-08} as integer,\n\t\t{2020-09-09} as integer,\n\t\t{2020-09-10} as integer,\n\t\t{2020-09-11} as integer,\n\t\t{2020-09-12} as integer,\n\t\t{2020-09-13} as integer,\n\t\t{2020-09-14} as integer,\n\t\t{2020-09-15} as integer,\n\t\t{2020-09-16} as integer,\n\t\t{2020-09-17} as integer,\n\t\t{2020-09-18} as integer,\n\t\t{2020-09-19} as integer,\n\t\t{2020-09-20} as integer,\n\t\t{2020-09-21} as integer,\n\t\t{2020-09-22} as integer,\n\t\t{2020-09-23} as integer,\n\t\t{2020-09-24} as integer,\n\t\t{2020-09-25} as integer,\n\t\t{2020-09-26} as integer,\n\t\t{2020-09-27} as integer,\n\t\t{2020-09-28} as integer,\n\t\t{2020-09-29} as integer,\n\t\t{2020-09-30} as integer,\n\t\t{2020-10-01} as integer,\n\t\t{2020-10-02} as integer,\n\t\t{2020-10-03} as integer,\n\t\t{2020-10-04} as integer,\n\t\t{2020-10-05} as integer,\n\t\t{2020-10-06} as integer,\n\t\t{2020-10-07} as integer,\n\t\t{2020-10-08} as integer,\n\t\t{2020-10-09} as integer,\n\t\t{2020-10-10} as integer,\n\t\t{2020-10-11} as integer,\n\t\t{2020-10-12} as integer,\n\t\t{2020-10-13} as integer,\n\t\t{2020-10-14} as integer,\n\t\t{2020-10-15} as integer,\n\t\t{2020-10-16} as integer,\n\t\t{2020-10-17} as integer,\n\t\t{2020-10-18} as integer,\n\t\t{2020-10-19} as integer,\n\t\t{2020-10-20} as integer,\n\t\t{2020-10-21} as integer,\n\t\t{2020-10-22} as integer,\n\t\t{2020-10-23} as integer,\n\t\t{2020-10-24} as integer,\n\t\t{2020-10-25} as integer,\n\t\t{2020-10-26} as integer,\n\t\t{2020-10-27} as integer,\n\t\t{2020-10-28} as integer,\n\t\t{2020-10-29} as integer,\n\t\t{2020-10-30} as integer,\n\t\t{2020-10-31} as integer,\n\t\t{2020-11-01} as integer,\n\t\t{2020-11-02} as integer,\n\t\t{2020-11-03} as integer,\n\t\t{2020-11-04} as integer,\n\t\t{2020-11-05} as integer,\n\t\t{2020-11-06} as integer,\n\t\t{2020-11-07} as integer,\n\t\t{2020-11-08} as integer,\n\t\t{2020-11-09} as integer,\n\t\t{2020-11-10} as integer,\n\t\t{2020-11-11} as integer,\n\t\t{2020-11-12} as integer,\n\t\t{2020-11-13} as integer,\n\t\t{2020-11-14} as integer,\n\t\t{2020-11-15} as integer,\n\t\t{2020-11-16} as integer,\n\t\t{2020-11-17} as integer,\n\t\t{2020-11-18} as integer,\n\t\t{2020-11-19} as integer,\n\t\t{2020-11-20} as integer,\n\t\t{2020-11-21} as integer,\n\t\t{2020-11-22} as integer,\n\t\t{2020-11-23} as integer,\n\t\t{2020-11-24} as integer,\n\t\t{2020-11-25} as integer,\n\t\t{2020-11-26} as integer,\n\t\t{2020-11-27} as integer,\n\t\t{2020-11-28} as integer,\n\t\t{2020-11-29} as integer,\n\t\t{2020-11-30} as integer,\n\t\t{2020-12-01} as integer,\n\t\t{2020-12-02} as integer,\n\t\t{2020-12-03} as integer,\n\t\t{2020-12-04} as integer,\n\t\t{2020-12-05} as integer,\n\t\t{2020-12-06} as integer,\n\t\t{2020-12-07} as integer,\n\t\t{2020-12-08} as integer,\n\t\t{2020-12-09} as integer,\n\t\t{2020-12-10} as integer,\n\t\t{2020-12-11} as integer,\n\t\t{2020-12-12} as integer,\n\t\t{2020-12-13} as integer,\n\t\t{2020-12-14} as integer,\n\t\t{2020-12-15} as integer,\n\t\t{2020-12-16} as integer,\n\t\t{2020-12-17} as integer,\n\t\t{2020-12-18} as integer,\n\t\t{2020-12-19} as integer,\n\t\t{2020-12-20} as integer,\n\t\t{2020-12-21} as integer,\n\t\t{2020-12-22} as integer,\n\t\t{2020-12-23} as integer,\n\t\t{2020-12-24} as integer,\n\t\t{2020-12-25} as integer,\n\t\t{2020-12-26} as integer,\n\t\t{2020-12-27} as integer,\n\t\t{2020-12-28} as integer,\n\t\t{2020-12-29} as integer,\n\t\t{2020-12-30} as integer,\n\t\t{2020-12-31} as integer,\n\t\t{2021-01-01} as integer,\n\t\t{2021-01-02} as integer,\n\t\t{2021-01-03} as integer,\n\t\t{2021-01-04} as integer,\n\t\t{2021-01-05} as integer,\n\t\t{2021-01-06} as integer,\n\t\t{2021-01-07} as integer,\n\t\t{2021-01-08} as integer,\n\t\t{2021-01-09} as integer,\n\t\t{2021-01-10} as integer,\n\t\t{2021-01-11} as integer,\n\t\t{2021-01-12} as integer,\n\t\t{2021-01-13} as integer,\n\t\t{2021-01-14} as integer,\n\t\t{2021-01-15} as integer,\n\t\t{2021-01-16} as integer,\n\t\t{2021-01-17} as integer,\n\t\t{2021-01-18} as integer,\n\t\t{2021-01-19} as integer,\n\t\t{2021-01-20} as integer,\n\t\t{2021-01-21} as integer,\n\t\t{2021-01-22} as integer,\n\t\t{2021-01-23} as integer,\n\t\t{2021-01-24} as integer,\n\t\t{2021-01-25} as integer,\n\t\t{2021-01-26} as integer,\n\t\t{2021-01-27} as integer,\n\t\t{2021-01-28} as integer,\n\t\t{2021-01-29} as integer,\n\t\t{2021-01-30} as integer,\n\t\t{2021-01-31} as integer,\n\t\t{2021-02-01} as integer,\n\t\t{2021-02-02} as integer,\n\t\t{2021-02-03} as integer,\n\t\t{2021-02-04} as integer,\n\t\t{2021-02-05} as integer,\n\t\t{2021-02-06} as integer,\n\t\t{2021-02-07} as integer,\n\t\t{2021-02-08} as integer,\n\t\t{2021-02-09} as integer,\n\t\t{2021-02-10} as integer,\n\t\t{2021-02-11} as integer,\n\t\t{2021-02-12} as integer,\n\t\t{2021-02-13} as integer,\n\t\t{2021-02-14} as integer,\n\t\t{2021-02-15} as integer,\n\t\t{2021-02-16} as integer,\n\t\t{2021-02-17} as integer,\n\t\t{2021-02-18} as integer,\n\t\t{2021-02-19} as integer,\n\t\t{2021-02-20} as integer,\n\t\t{2021-02-21} as integer,\n\t\t{2021-02-22} as integer,\n\t\t{2021-02-23} as integer,\n\t\t{2021-02-24} as integer,\n\t\t{2021-02-25} as integer,\n\t\t{2021-02-26} as integer,\n\t\t{2021-02-27} as integer,\n\t\t{2021-02-28} as integer,\n\t\t{2021-03-01} as integer,\n\t\t{2021-03-02} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> sourceCSV\nsourceCSV select(mapColumn(\n\t\teach(patternMatch(`.*`),\n\t\t\tregexReplace($$,' ','') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSpaces\nRemoveSpaces derive(each(match(type=='integer'), $$ = toString($$))) ~> ConvertSchema\nConvertSchema unpivot(output(\n\t\tDate as string,\n\t\tDailyCases as string\n\t),\n\tungroupBy(countyFIPS,\n\t\tCountyName,\n\t\tState,\n\t\tStateFIPS),\n\tlateral: false,\n\tignoreNullPivots: false) ~> UnpivotDataColumnsToRows\nRearrangeColumns select(mapColumn(\n\t\teach(patternMatch(`.*`),\n\t\t\tupper($$) = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Capitalize\nUnpivotDataColumnsToRows derive(LOADDATE = currentTimestamp(),\n\t\tLOADTIME = currentDate()) ~> AddNewColumns\nAddNewColumns select(mapColumn(\n\t\tcountyFIPS,\n\t\tCountyName,\n\t\tLOADDATE,\n\t\tLOADTIME,\n\t\tState,\n\t\tStateFIPS,\n\t\tDate,\n\t\tDailyCases\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RearrangeColumns\nCapitalize derive(COUNTYFIPS = iifNull(COUNTYFIPS, toLong(0), COUNTYFIPS),\n\t\tSTATEFIPS = iifNull(STATEFIPS, toLong(0), STATEFIPS),\n\t\tDAILYCASES = iifNull(DAILYCASES, toString(0), DAILYCASES)) ~> FillEmptyFields\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestCSV\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCSV\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestParquet\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkParquet"                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/parquet_sink_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/',variables('dataflowWithSqlName'))]",                    
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "USAFacts"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceCSV"
                                }
                            ],
                            
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkLatestCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "csv_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkCSV"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkJsonl"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkLatestParquet"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "parquet_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SinkParquet"
                                },
                                  {
                                    "dataset": {
                                        "referenceName": "sql_sink_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sinkSQL"
                                }
                            ],
                             "transformations": [
                                {
                                    "name": "RemoveSpaces"
                                },
                                {
                                    "name": "ConvertSchema"
                                },
                                {
                                    "name": "UnpivotDataColumnsToRows"
                                },
                                {
                                    "name": "Capitalize"
                                },
                                {
                                    "name": "AddNewColumns"
                                },
                                {
                                    "name": "RearrangeColumns"
                                },
                                {
                                    "name": "FillEmptyFields"
                                }
                            ],

                            "script": "parameters{\n\tfilename as string ('USAFacts_curated_data'),\n\trunid as string ('runtime_guid')\n}\nsource(output(\n\t\tcountyFIPS as short,\n\t\t{County Name} as string,\n\t\tState as string,\n\t\tStateFIPS as short,\n\t\t{2020-01-22} as integer,\n\t\t{2020-01-23} as integer,\n\t\t{2020-01-24} as integer,\n\t\t{2020-01-25} as integer,\n\t\t{2020-01-26} as integer,\n\t\t{2020-01-27} as integer,\n\t\t{2020-01-28} as integer,\n\t\t{2020-01-29} as integer,\n\t\t{2020-01-30} as integer,\n\t\t{2020-01-31} as integer,\n\t\t{2020-02-01} as integer,\n\t\t{2020-02-02} as integer,\n\t\t{2020-02-03} as integer,\n\t\t{2020-02-04} as integer,\n\t\t{2020-02-05} as integer,\n\t\t{2020-02-06} as integer,\n\t\t{2020-02-07} as integer,\n\t\t{2020-02-08} as integer,\n\t\t{2020-02-09} as integer,\n\t\t{2020-02-10} as integer,\n\t\t{2020-02-11} as integer,\n\t\t{2020-02-12} as integer,\n\t\t{2020-02-13} as integer,\n\t\t{2020-02-14} as integer,\n\t\t{2020-02-15} as integer,\n\t\t{2020-02-16} as integer,\n\t\t{2020-02-17} as integer,\n\t\t{2020-02-18} as integer,\n\t\t{2020-02-19} as integer,\n\t\t{2020-02-20} as integer,\n\t\t{2020-02-21} as integer,\n\t\t{2020-02-22} as integer,\n\t\t{2020-02-23} as integer,\n\t\t{2020-02-24} as integer,\n\t\t{2020-02-25} as integer,\n\t\t{2020-02-26} as integer,\n\t\t{2020-02-27} as integer,\n\t\t{2020-02-28} as integer,\n\t\t{2020-02-29} as integer,\n\t\t{2020-03-01} as integer,\n\t\t{2020-03-02} as integer,\n\t\t{2020-03-03} as integer,\n\t\t{2020-03-04} as integer,\n\t\t{2020-03-05} as integer,\n\t\t{2020-03-06} as integer,\n\t\t{2020-03-07} as integer,\n\t\t{2020-03-08} as integer,\n\t\t{2020-03-09} as integer,\n\t\t{2020-03-10} as integer,\n\t\t{2020-03-11} as integer,\n\t\t{2020-03-12} as integer,\n\t\t{2020-03-13} as integer,\n\t\t{2020-03-14} as integer,\n\t\t{2020-03-15} as integer,\n\t\t{2020-03-16} as integer,\n\t\t{2020-03-17} as integer,\n\t\t{2020-03-18} as integer,\n\t\t{2020-03-19} as integer,\n\t\t{2020-03-20} as integer,\n\t\t{2020-03-21} as integer,\n\t\t{2020-03-22} as integer,\n\t\t{2020-03-23} as integer,\n\t\t{2020-03-24} as integer,\n\t\t{2020-03-25} as integer,\n\t\t{2020-03-26} as integer,\n\t\t{2020-03-27} as integer,\n\t\t{2020-03-28} as integer,\n\t\t{2020-03-29} as integer,\n\t\t{2020-03-30} as integer,\n\t\t{2020-03-31} as integer,\n\t\t{2020-04-01} as integer,\n\t\t{2020-04-02} as integer,\n\t\t{2020-04-03} as integer,\n\t\t{2020-04-04} as integer,\n\t\t{2020-04-05} as integer,\n\t\t{2020-04-06} as integer,\n\t\t{2020-04-07} as integer,\n\t\t{2020-04-08} as integer,\n\t\t{2020-04-09} as integer,\n\t\t{2020-04-10} as integer,\n\t\t{2020-04-11} as integer,\n\t\t{2020-04-12} as integer,\n\t\t{2020-04-13} as integer,\n\t\t{2020-04-14} as integer,\n\t\t{2020-04-15} as integer,\n\t\t{2020-04-16} as integer,\n\t\t{2020-04-17} as integer,\n\t\t{2020-04-18} as integer,\n\t\t{2020-04-19} as integer,\n\t\t{2020-04-20} as integer,\n\t\t{2020-04-21} as integer,\n\t\t{2020-04-22} as integer,\n\t\t{2020-04-23} as integer,\n\t\t{2020-04-24} as integer,\n\t\t{2020-04-25} as integer,\n\t\t{2020-04-26} as integer,\n\t\t{2020-04-27} as integer,\n\t\t{2020-04-28} as integer,\n\t\t{2020-04-29} as integer,\n\t\t{2020-04-30} as integer,\n\t\t{2020-05-01} as integer,\n\t\t{2020-05-02} as integer,\n\t\t{2020-05-03} as integer,\n\t\t{2020-05-04} as integer,\n\t\t{2020-05-05} as integer,\n\t\t{2020-05-06} as integer,\n\t\t{2020-05-07} as integer,\n\t\t{2020-05-08} as integer,\n\t\t{2020-05-09} as integer,\n\t\t{2020-05-10} as integer,\n\t\t{2020-05-11} as integer,\n\t\t{2020-05-12} as integer,\n\t\t{2020-05-13} as integer,\n\t\t{2020-05-14} as integer,\n\t\t{2020-05-15} as integer,\n\t\t{2020-05-16} as integer,\n\t\t{2020-05-17} as integer,\n\t\t{2020-05-18} as integer,\n\t\t{2020-05-19} as integer,\n\t\t{2020-05-20} as integer,\n\t\t{2020-05-21} as integer,\n\t\t{2020-05-22} as integer,\n\t\t{2020-05-23} as integer,\n\t\t{2020-05-24} as integer,\n\t\t{2020-05-25} as integer,\n\t\t{2020-05-26} as integer,\n\t\t{2020-05-27} as integer,\n\t\t{2020-05-28} as integer,\n\t\t{2020-05-29} as integer,\n\t\t{2020-05-30} as integer,\n\t\t{2020-05-31} as integer,\n\t\t{2020-06-01} as integer,\n\t\t{2020-06-02} as integer,\n\t\t{2020-06-03} as integer,\n\t\t{2020-06-04} as integer,\n\t\t{2020-06-05} as integer,\n\t\t{2020-06-06} as integer,\n\t\t{2020-06-07} as integer,\n\t\t{2020-06-08} as integer,\n\t\t{2020-06-09} as integer,\n\t\t{2020-06-10} as integer,\n\t\t{2020-06-11} as integer,\n\t\t{2020-06-12} as integer,\n\t\t{2020-06-13} as integer,\n\t\t{2020-06-14} as integer,\n\t\t{2020-06-15} as integer,\n\t\t{2020-06-16} as integer,\n\t\t{2020-06-17} as integer,\n\t\t{2020-06-18} as integer,\n\t\t{2020-06-19} as integer,\n\t\t{2020-06-20} as integer,\n\t\t{2020-06-21} as integer,\n\t\t{2020-06-22} as integer,\n\t\t{2020-06-23} as integer,\n\t\t{2020-06-24} as integer,\n\t\t{2020-06-25} as integer,\n\t\t{2020-06-26} as integer,\n\t\t{2020-06-27} as integer,\n\t\t{2020-06-28} as integer,\n\t\t{2020-06-29} as integer,\n\t\t{2020-06-30} as integer,\n\t\t{2020-07-01} as integer,\n\t\t{2020-07-02} as integer,\n\t\t{2020-07-03} as integer,\n\t\t{2020-07-04} as integer,\n\t\t{2020-07-05} as integer,\n\t\t{2020-07-06} as integer,\n\t\t{2020-07-07} as integer,\n\t\t{2020-07-08} as integer,\n\t\t{2020-07-09} as integer,\n\t\t{2020-07-10} as integer,\n\t\t{2020-07-11} as integer,\n\t\t{2020-07-12} as integer,\n\t\t{2020-07-13} as integer,\n\t\t{2020-07-14} as integer,\n\t\t{2020-07-15} as integer,\n\t\t{2020-07-16} as integer,\n\t\t{2020-07-17} as integer,\n\t\t{2020-07-18} as integer,\n\t\t{2020-07-19} as integer,\n\t\t{2020-07-20} as integer,\n\t\t{2020-07-21} as integer,\n\t\t{2020-07-22} as integer,\n\t\t{2020-07-23} as integer,\n\t\t{2020-07-24} as integer,\n\t\t{2020-07-25} as integer,\n\t\t{2020-07-26} as integer,\n\t\t{2020-07-27} as integer,\n\t\t{2020-07-28} as integer,\n\t\t{2020-07-29} as integer,\n\t\t{2020-07-30} as integer,\n\t\t{2020-07-31} as integer,\n\t\t{2020-08-01} as integer,\n\t\t{2020-08-02} as integer,\n\t\t{2020-08-03} as integer,\n\t\t{2020-08-04} as integer,\n\t\t{2020-08-05} as integer,\n\t\t{2020-08-06} as integer,\n\t\t{2020-08-07} as integer,\n\t\t{2020-08-08} as integer,\n\t\t{2020-08-09} as integer,\n\t\t{2020-08-10} as integer,\n\t\t{2020-08-11} as integer,\n\t\t{2020-08-12} as integer,\n\t\t{2020-08-13} as integer,\n\t\t{2020-08-14} as integer,\n\t\t{2020-08-15} as integer,\n\t\t{2020-08-16} as integer,\n\t\t{2020-08-17} as integer,\n\t\t{2020-08-18} as integer,\n\t\t{2020-08-19} as integer,\n\t\t{2020-08-20} as integer,\n\t\t{2020-08-21} as integer,\n\t\t{2020-08-22} as integer,\n\t\t{2020-08-23} as integer,\n\t\t{2020-08-24} as integer,\n\t\t{2020-08-25} as integer,\n\t\t{2020-08-26} as integer,\n\t\t{2020-08-27} as integer,\n\t\t{2020-08-28} as integer,\n\t\t{2020-08-29} as integer,\n\t\t{2020-08-30} as integer,\n\t\t{2020-08-31} as integer,\n\t\t{2020-09-01} as integer,\n\t\t{2020-09-02} as integer,\n\t\t{2020-09-03} as integer,\n\t\t{2020-09-04} as integer,\n\t\t{2020-09-05} as integer,\n\t\t{2020-09-06} as integer,\n\t\t{2020-09-07} as integer,\n\t\t{2020-09-08} as integer,\n\t\t{2020-09-09} as integer,\n\t\t{2020-09-10} as integer,\n\t\t{2020-09-11} as integer,\n\t\t{2020-09-12} as integer,\n\t\t{2020-09-13} as integer,\n\t\t{2020-09-14} as integer,\n\t\t{2020-09-15} as integer,\n\t\t{2020-09-16} as integer,\n\t\t{2020-09-17} as integer,\n\t\t{2020-09-18} as integer,\n\t\t{2020-09-19} as integer,\n\t\t{2020-09-20} as integer,\n\t\t{2020-09-21} as integer,\n\t\t{2020-09-22} as integer,\n\t\t{2020-09-23} as integer,\n\t\t{2020-09-24} as integer,\n\t\t{2020-09-25} as integer,\n\t\t{2020-09-26} as integer,\n\t\t{2020-09-27} as integer,\n\t\t{2020-09-28} as integer,\n\t\t{2020-09-29} as integer,\n\t\t{2020-09-30} as integer,\n\t\t{2020-10-01} as integer,\n\t\t{2020-10-02} as integer,\n\t\t{2020-10-03} as integer,\n\t\t{2020-10-04} as integer,\n\t\t{2020-10-05} as integer,\n\t\t{2020-10-06} as integer,\n\t\t{2020-10-07} as integer,\n\t\t{2020-10-08} as integer,\n\t\t{2020-10-09} as integer,\n\t\t{2020-10-10} as integer,\n\t\t{2020-10-11} as integer,\n\t\t{2020-10-12} as integer,\n\t\t{2020-10-13} as integer,\n\t\t{2020-10-14} as integer,\n\t\t{2020-10-15} as integer,\n\t\t{2020-10-16} as integer,\n\t\t{2020-10-17} as integer,\n\t\t{2020-10-18} as integer,\n\t\t{2020-10-19} as integer,\n\t\t{2020-10-20} as integer,\n\t\t{2020-10-21} as integer,\n\t\t{2020-10-22} as integer,\n\t\t{2020-10-23} as integer,\n\t\t{2020-10-24} as integer,\n\t\t{2020-10-25} as integer,\n\t\t{2020-10-26} as integer,\n\t\t{2020-10-27} as integer,\n\t\t{2020-10-28} as integer,\n\t\t{2020-10-29} as integer,\n\t\t{2020-10-30} as integer,\n\t\t{2020-10-31} as integer,\n\t\t{2020-11-01} as integer,\n\t\t{2020-11-02} as integer,\n\t\t{2020-11-03} as integer,\n\t\t{2020-11-04} as integer,\n\t\t{2020-11-05} as integer,\n\t\t{2020-11-06} as integer,\n\t\t{2020-11-07} as integer,\n\t\t{2020-11-08} as integer,\n\t\t{2020-11-09} as integer,\n\t\t{2020-11-10} as integer,\n\t\t{2020-11-11} as integer,\n\t\t{2020-11-12} as integer,\n\t\t{2020-11-13} as integer,\n\t\t{2020-11-14} as integer,\n\t\t{2020-11-15} as integer,\n\t\t{2020-11-16} as integer,\n\t\t{2020-11-17} as integer,\n\t\t{2020-11-18} as integer,\n\t\t{2020-11-19} as integer,\n\t\t{2020-11-20} as integer,\n\t\t{2020-11-21} as integer,\n\t\t{2020-11-22} as integer,\n\t\t{2020-11-23} as integer,\n\t\t{2020-11-24} as integer,\n\t\t{2020-11-25} as integer,\n\t\t{2020-11-26} as integer,\n\t\t{2020-11-27} as integer,\n\t\t{2020-11-28} as integer,\n\t\t{2020-11-29} as integer,\n\t\t{2020-11-30} as integer,\n\t\t{2020-12-01} as integer,\n\t\t{2020-12-02} as integer,\n\t\t{2020-12-03} as integer,\n\t\t{2020-12-04} as integer,\n\t\t{2020-12-05} as integer,\n\t\t{2020-12-06} as integer,\n\t\t{2020-12-07} as integer,\n\t\t{2020-12-08} as integer,\n\t\t{2020-12-09} as integer,\n\t\t{2020-12-10} as integer,\n\t\t{2020-12-11} as integer,\n\t\t{2020-12-12} as integer,\n\t\t{2020-12-13} as integer,\n\t\t{2020-12-14} as integer,\n\t\t{2020-12-15} as integer,\n\t\t{2020-12-16} as integer,\n\t\t{2020-12-17} as integer,\n\t\t{2020-12-18} as integer,\n\t\t{2020-12-19} as integer,\n\t\t{2020-12-20} as integer,\n\t\t{2020-12-21} as integer,\n\t\t{2020-12-22} as integer,\n\t\t{2020-12-23} as integer,\n\t\t{2020-12-24} as integer,\n\t\t{2020-12-25} as integer,\n\t\t{2020-12-26} as integer,\n\t\t{2020-12-27} as integer,\n\t\t{2020-12-28} as integer,\n\t\t{2020-12-29} as integer,\n\t\t{2020-12-30} as integer,\n\t\t{2020-12-31} as integer,\n\t\t{2021-01-01} as integer,\n\t\t{2021-01-02} as integer,\n\t\t{2021-01-03} as integer,\n\t\t{2021-01-04} as integer,\n\t\t{2021-01-05} as integer,\n\t\t{2021-01-06} as integer,\n\t\t{2021-01-07} as integer,\n\t\t{2021-01-08} as integer,\n\t\t{2021-01-09} as integer,\n\t\t{2021-01-10} as integer,\n\t\t{2021-01-11} as integer,\n\t\t{2021-01-12} as integer,\n\t\t{2021-01-13} as integer,\n\t\t{2021-01-14} as integer,\n\t\t{2021-01-15} as integer,\n\t\t{2021-01-16} as integer,\n\t\t{2021-01-17} as integer,\n\t\t{2021-01-18} as integer,\n\t\t{2021-01-19} as integer,\n\t\t{2021-01-20} as integer,\n\t\t{2021-01-21} as integer,\n\t\t{2021-01-22} as integer,\n\t\t{2021-01-23} as integer,\n\t\t{2021-01-24} as integer,\n\t\t{2021-01-25} as integer,\n\t\t{2021-01-26} as integer,\n\t\t{2021-01-27} as integer,\n\t\t{2021-01-28} as integer,\n\t\t{2021-01-29} as integer,\n\t\t{2021-01-30} as integer,\n\t\t{2021-01-31} as integer,\n\t\t{2021-02-01} as integer,\n\t\t{2021-02-02} as integer,\n\t\t{2021-02-03} as integer,\n\t\t{2021-02-04} as integer,\n\t\t{2021-02-05} as integer,\n\t\t{2021-02-06} as integer,\n\t\t{2021-02-07} as integer,\n\t\t{2021-02-08} as integer,\n\t\t{2021-02-09} as integer,\n\t\t{2021-02-10} as integer,\n\t\t{2021-02-11} as integer,\n\t\t{2021-02-12} as integer,\n\t\t{2021-02-13} as integer,\n\t\t{2021-02-14} as integer,\n\t\t{2021-02-15} as integer,\n\t\t{2021-02-16} as integer,\n\t\t{2021-02-17} as integer,\n\t\t{2021-02-18} as integer,\n\t\t{2021-02-19} as integer,\n\t\t{2021-02-20} as integer,\n\t\t{2021-02-21} as integer,\n\t\t{2021-02-22} as integer,\n\t\t{2021-02-23} as integer,\n\t\t{2021-02-24} as integer,\n\t\t{2021-02-25} as integer,\n\t\t{2021-02-26} as integer,\n\t\t{2021-02-27} as integer,\n\t\t{2021-02-28} as integer,\n\t\t{2021-03-01} as integer,\n\t\t{2021-03-02} as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tinferDriftedColumnTypes: true) ~> sourceCSV\nsourceCSV select(mapColumn(\n\t\teach(patternMatch(`.*`),\n\t\t\tregexReplace($$,' ','') = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RemoveSpaces\nRemoveSpaces derive(each(match(type=='integer'), $$ = toString($$))) ~> ConvertSchema\nConvertSchema unpivot(output(\n\t\tDate as string,\n\t\tDailyCases as string\n\t),\n\tungroupBy(countyFIPS,\n\t\tCountyName,\n\t\tState,\n\t\tStateFIPS),\n\tlateral: false,\n\tignoreNullPivots: false) ~> UnpivotDataColumnsToRows\nRearrangeColumns select(mapColumn(\n\t\teach(patternMatch(`.*`),\n\t\t\tupper($$) = $$)\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Capitalize\nUnpivotDataColumnsToRows derive(LOADDATE = currentTimestamp(),\n\t\tLOADTIME = currentDate()) ~> AddNewColumns\nAddNewColumns select(mapColumn(\n\t\tcountyFIPS,\n\t\tCountyName,\n\t\tLOADDATE,\n\t\tLOADTIME,\n\t\tState,\n\t\tStateFIPS,\n\t\tDate,\n\t\tDailyCases\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> RearrangeColumns\nCapitalize derive(COUNTYFIPS = iifNull(COUNTYFIPS, toLong(0), COUNTYFIPS),\n\t\tSTATEFIPS = iifNull(STATEFIPS, toLong(0), STATEFIPS),\n\t\tDAILYCASES = iifNull(DAILYCASES, toString(0), DAILYCASES)) ~> FillEmptyFields\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestJsonl\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename, '.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkLatestCSV\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.csv'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkCSV\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.jsonl'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkJsonl\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename, '.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkLatestParquet\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concat($filename,'_', $runid,'.parquet'))],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SinkParquet\nFillEmptyFields sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sinkSQL"
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/parquet_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/sql_sink_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_Without_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "To Raw Partition",
                                "description": "",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "To Raw Overwrite",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                           {
                            "name":"Reformat Columns",
                            "type":"ExecuteDataFlow",
                            "dependsOn":[
                                {
                                    "activity":"Current Schema Has More Columns",
                                    "dependencyConditions":[
                                    "Completed"
                                    ]
                                },
                                {
                                    "activity":"Current Schema Has Same Columns",
                                    "dependencyConditions":[
                                    "Completed"
                                    ]
                                },
                                {
                                    "activity":"Current Schema Has Less Columns",
                                    "dependencyConditions":[
                                    "Completed"
                                    ]
                                }
                            ],
                            "policy":{
                                "timeout":"7.00:00:00",
                                "retry":3,
                                "retryIntervalInSeconds":30,
                                "secureOutput":false,
                                "secureInput":false
                            },
                            "userProperties":[
                                
                            ],
                            "typeProperties":{
                                "dataflow":{
                                    "referenceName":"Transformations_Without_SQL_Sink",
                                    "type":"DataFlowReference",
                                    "parameters":{
                                    "filename":{
                                        "value":"'@{pipeline().parameters.filename}'",
                                        "type":"Expression"
                                    },
                                    "runid":{
                                        "value":"'@{pipeline().RunId}'",
                                        "type":"Expression"
                                    }
                                    },
                                    "datasetParameters":{
                                    "sourceCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.sourceFilename,'.csv')",
                                            "type":"Expression"
                                        },
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkLatestJsonl":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.filename,'.jsonl')",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkLatestCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.filename,'.csv')",
                                            "type":"Expression"
                                        },
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow",
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkJsonl":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    },
                                    "SinkLatestParquet":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    },
                                    "SinkParquet":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    }
                                    }
                                },
                                "staging":{
                                    
                                },
                                "compute":{
                                    "coreCount":8,
                                    "computeType":"General"
                                },
                                "traceLevel":"Fine"
                            }
                        },
                            {
                                "name": "JSONL to JSON LATEST",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "JSONL to JSON",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "JsonReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Retain Previous Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_last_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Previous Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Get_Metadata_Of_Last_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Get_Metadata_Of_Current_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Current Schema Has Less Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 1",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has Less Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has More Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Current_CSV').output.columnCount,activity('Get_Metadata_Of_Last_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 2",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has More Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has Same Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@and(equals(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount),not(equals(activity('Get_Metadata_Of_Last_CSV').output.structure,activity('Get_Metadata_Of_Current_CSV').output.structure)))",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 3",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Equal Number But Different Names Or Arrangement",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        "parameters": {
                            "sourceFilename": {
                                "type": "string",
                                "defaultValue": "USAFacts_raw_data"
                            },
                            "sourceRelativeUrl": {
                                "type": "string",
                                "defaultValue": "/public/data/covid-19/covid_confirmed_usafacts.csv?_ga=2.118489866.228632082.1614846502-212182378.1613633732"
                            },
                            "blobContainer": {
                                "type": "string",
                                "defaultValue": "public"
                            },
                            "rawBlobDirectory": {
                                "type": "string",
                                "defaultValue": "raw/USAFacts_data"
                            },
                            "curatedBlobDirectory": {
                                "type": "string",
                                "defaultValue": "curated/USAFacts_data"
                            },
                            "filename": {
                                "type": "string",
                                "defaultValue": "USAFacts_curated_data"
                            }
                        },
                        "folder": {
                            "name": "USAFacts/BlobStorageDataExtraction"
                        },
                        "annotations": [
                            "USAFacts"
                        ],
                        "lastPublishTime": "2021-02-22T09:06:22Z"
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/http_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/dataflows/',variables('dataflowWithoutSqlName'))]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/save_current_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_last_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/current_csv_dataset')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_With_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "To Raw Partition",
                                "description": "",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'_',pipeline().RunId,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "To Raw Overwrite",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "HttpReadSettings",
                                            "requestMethod": "GET"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "http_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "relativeUrl": {
                                                "value": "@pipeline().parameters.sourceRelativeUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "csv_source_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.sourceFilename,'.csv')",
                                                "type": "Expression"
                                            },
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Reformat Columns",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Create Schema if not exists",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "Transformations_With_SQL_Sink",
                                        "type": "DataFlowReference",
                                        "parameters": {
                                            "filename": {
                                                "value": "'@{pipeline().parameters.filename}'",
                                                "type": "Expression"
                                            },
                                            "runid": {
                                                "value": "'@{pipeline().RunId}'",
                                                "type": "Expression"
                                            }
                                        },
                                    "datasetParameters":{
                                    "sourceCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.rawBlobDirectory, '/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.sourceFilename,'.csv')",
                                            "type":"Expression"
                                        },
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkLatestJsonl":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.filename,'.jsonl')",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkLatestCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":{
                                            "value":"@concat(pipeline().parameters.filename,'.csv')",
                                            "type":"Expression"
                                        },
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkCSV":{
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow",
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        }
                                    },
                                    "sinkJsonl":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    },
                                    "SinkLatestParquet":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    },
                                    "SinkParquet":{
                                        "container":{
                                            "value":"@pipeline().parameters.blobContainer",
                                            "type":"Expression"
                                        },
                                        "directory":{
                                            "value":"@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                            "type":"Expression"
                                        },
                                        "file":"specified in data flow"
                                    },
                                     "sinkSQL":{
                                        "tablename":"curatedTable",
                                        "schemaName":"USAFacts"
                                    }
                                }
                            },
                                    "staging": {},
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    },
                                    "traceLevel": "Fine"
                                }
                            },
                            {
                                "name": "JSONL to JSON LATEST",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "JSONL to JSON",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "JsonSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "JsonReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "JsonSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "JsonWriteSettings",
                                            "filePattern": "arrayOfObjects"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/latest')",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'.jsonl')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "json_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "container": {
                                                "value": "@pipeline().parameters.blobContainer",
                                                "type": "Expression"
                                            },
                                            "directory": {
                                                "value": "@concat(pipeline().parameters.curatedBlobDirectory,'/',formatdatetime(utcnow(),'yyyy/MM/dd'))",
                                                "type": "Expression"
                                            },
                                            "file": {
                                                "value": "@concat(pipeline().parameters.filename,'_',pipeline().RunId,'.json')",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "Retain Previous Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_last_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Previous Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "DelimitedTextSource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "DelimitedTextSink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextWriteSettings",
                                            "quoteAllText": true,
                                            "fileExtension": ".csv"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Get_Metadata_Of_Last_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "save_current_schema_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Get_Metadata_Of_Current_CSV",
                                "type": "GetMetadata",
                                "dependsOn": [
                                    {
                                        "activity": "To Raw Partition",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    {
                                        "activity": "To Raw Overwrite",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataset": {
                                        "referenceName": "current_csv_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    },
                                    "fieldList": [
                                        "structure",
                                        "columnCount"
                                    ],
                                    "storeSettings": {
                                        "type": "AzureBlobStorageReadSettings",
                                        "recursive": true
                                    },
                                    "formatSettings": {
                                        "type": "DelimitedTextReadSettings"
                                    }
                                }
                            },
                            {
                                "name": "Current Schema Has Less Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 1",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has Less Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has More Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get_Metadata_Of_Current_CSV').output.columnCount,activity('Get_Metadata_Of_Last_CSV').output.columnCount)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 2",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Current Schema Has More Columns",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Current Schema Has Same Columns",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get_Metadata_Of_Last_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Get_Metadata_Of_Current_CSV",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@and(equals(activity('Get_Metadata_Of_Last_CSV').output.columnCount,activity('Get_Metadata_Of_Current_CSV').output.columnCount),not(equals(activity('Get_Metadata_Of_Last_CSV').output.structure,activity('Get_Metadata_Of_Current_CSV').output.structure)))",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "Wait And Continue 3",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "Alert Equal Number But Different Names Or Arrangement",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Sql Data Type change detection",
                                "type": "SqlServerStoredProcedure",
                                "dependsOn": [
                                    {
                                        "activity": "CreateStoreProcedureIfNotExists",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "storedProcedureName": "USAFacts.DataTypeChangedProc"
                                },
                                "linkedServiceName": {
                                    "referenceName": "USAFacts_sql_linkedservice",
                                    "type": "LinkedServiceReference"
                                }
                            },
                            {
                                "name": "Get Changed Data Type Columns",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Sql Data Type change detection",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "select * from USAFacts.storeProcTable",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "USAFacts"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "IfDataTypeChangedAlert",
                                "type": "IfCondition",
                                "dependsOn": [
                                    {
                                        "activity": "Get Changed Data Type Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "userProperties": [],
                                "typeProperties": {
                                    "expression": {
                                        "value": "@greater(activity('Get Changed Data Type Columns').output.count,0)",
                                        "type": "Expression"
                                    },
                                    "ifFalseActivities": [
                                        {
                                            "name": "WaitFalseNotChangedDataType",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ],
                                    "ifTrueActivities": [
                                        {
                                            "name": "WaitTrueChangedDataType",
                                            "type": "Wait",
                                            "dependsOn": [],
                                            "userProperties": [],
                                            "typeProperties": {
                                                "waitTimeInSeconds": 1
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "CreateStoreProcedureIfNotExists",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Reformat Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'USAFacts')\nBEGIN\nEXEC('CREATE SCHEMA USAFacts')\nEND\nIF NOT EXISTS (\n    select * \n    from sys.objects \n    WHERE object_id = OBJECT_ID(N'[USAFacts].[DataTypeChangedProc]')\n    )\nBEGIN\n    EXEC('CREATE PROCEDURE USAFacts.DataTypeChangedProc AS IF OBJECT_ID(''USAFacts.storeProcTable'', ''u'') IS NOT NULL DROP TABLE USAFacts.storeProcTable; CREATE TABLE USAFacts.storeProcTable( table1_name varchar(255), Column1_name varchar(255), DATA_TYPE1 varchar(255), table2_name varchar(255), Column2_name varchar(255), DATA_TYPE2 varchar(255) ); INSERT INTO USAFacts.storeProcTable SELECT c1.table_name, c1.COLUMN_NAME, c1.DATA_TYPE, c2.table_name, c2.COLUMN_NAME, c2.DATA_TYPE FROM [INFORMATION_SCHEMA].[COLUMNS] c1 INNER JOIN [INFORMATION_SCHEMA].[COLUMNS] c2 ON (c1.COLUMN_NAME = c2.COLUMN_NAME AND c1.data_type <> c2.DATA_TYPE) WHERE c1.table_name=''curatedTable'' AND c2.table_name = ''previousTable'';')\n    select Count(*) from sys.symmetric_keys;\nEND\n\nELSE\n\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "USAFacts"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "Create Schema if not exists",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Current Schema Has More Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Same Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    },
                                    {
                                        "activity": "Current Schema Has Less Columns",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": {
                                            "value": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'USAFacts')\nBEGIN\nEXEC('CREATE SCHEMA USAFacts')\nselect Count(*) from sys.symmetric_keys;\nEND\nELSE\nBEGIN\n    select Count(*) from sys.symmetric_keys;\nEND",
                                            "type": "Expression"
                                        },
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "save_store_proc_result_table",
                                        "type": "DatasetReference",
                                        "parameters": {
                                            "storeProcTable": "storeProcTable",
                                            "schemaName": "USAFacts"
                                        }
                                    },
                                    "firstRowOnly": false
                                }
                            },
                            {
                                "name": "Retain Last Sql Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "IfDataTypeChangedAlert",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "sink": {
                                        "type": "AzureSqlSink",
                                        "preCopyScript": "IF OBJECT_ID('[USAFacts].[previousTableSaveCopy]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [USAFacts].[previousTableSaveCopy];\n\nEND",
                                        "tableOption": "autoCreate",
                                        "disableMetricsCollection": false
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "save_sql_schema_to_detect_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "retain_sql_schema_to_compare_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            },
                            {
                                "name": "Save Current Sql Schema",
                                "type": "Copy",
                                "dependsOn": [
                                    {
                                        "activity": "Retain Last Sql Schema",
                                        "dependencyConditions": [
                                            "Completed"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "sink": {
                                        "type": "AzureSqlSink",
                                        "preCopyScript": "IF OBJECT_ID('[USAFacts].[previousTable]', 'U') IS NOT NULL\n\nBEGIN\n\nDROP TABLE [USAFacts].[previousTable]; \n\nEND",
                                        "tableOption": "autoCreate",
                                        "disableMetricsCollection": false
                                    },
                                    "enableStaging": false,
                                    "translator": {
                                        "type": "TabularTranslator",
                                        "typeConversion": true,
                                        "typeConversionSettings": {
                                            "allowDataTruncation": true,
                                            "treatBooleanAsNumber": false
                                        }
                                    }
                                },
                                "inputs": [
                                    {
                                        "referenceName": "sql_sink_dataset",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "save_sql_schema_to_detect_datatype_change",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                ]
                            }
                        ],
                        "parameters": {
                            "sourceFilename": {
                                "type": "string",
                                "defaultValue": "USAFacts_raw_data"
                            },
                            "sourceRelativeUrl": {
                                "type": "string",
                                "defaultValue": "/public/data/covid-19/covid_confirmed_usafacts.csv?_ga=2.43314982.228632082.1614846502-212182378.1613633732"
                            },
                            "blobContainer": {
                                "type": "string",
                                "defaultValue": "public"
                            },
                            "rawBlobDirectory": {
                                "type": "string",
                                "defaultValue": "raw/USAFacts_data"
                            },
                            "curatedBlobDirectory": {
                                "type": "string",
                                "defaultValue": "curated/USAFacts_data"
                            },
                            "filename": {
                                "type": "string",
                                "defaultValue": "USAFacts_curated_data"
                            }
                        },
                        "variables": {},
                        "folder": {
                            "name": "USAFacts/BlobStorageAndSqlDataExtraction"
                        },
                        "annotations": [
                            "USAFacts"
                        ],
                        "lastPublishTime": "2021-02-22T09:06:22Z"
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/datasets/http_source_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/csv_source_dataset')]",
                        "[concat(variables('factoryId'), '/dataflows/',variables('dataflowWithSqlName'))]",
                        "[concat(variables('factoryId'), '/datasets/json_sink_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/save_current_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_last_schema_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/current_csv_dataset')]",
                        "[concat(variables('factoryId'), '/datasets/retain_sql_schema_to_compare_datatype_change')]",
                        "[concat(variables('factoryId'), '/datasets/save_sql_schema_to_detect_datatype_change')]",
                        "[concat(variables('factoryId'), '/datasets/save_store_proc_result_table')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_Trigger_With_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "USAFacts_With_Sql_Sink",
                                    "type": "PipelineReference"
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('currentTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/pipelines/USAFacts_With_Sql_Sink')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "[concat(parameters('factoryName'), '/USAFacts_Trigger_Without_Sql_Sink')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "USAFacts_Without_Sql_Sink",
                                    "type": "PipelineReference"
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('currentTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "[concat(variables('factoryId'), '/pipelines/USAFacts_Without_Sql_Sink')]"
                    ]
                },
                {
                    "type": "Microsoft.Insights/actionGroups",
                    "apiVersion": "2018-03-01",
                    "name": "NotificationAlertFromADF",
                    "location": "Global",
                    "properties": {
                        "groupShortName": "ADFalerts",
                        "enabled": true,
                        "emailReceivers": [
                            {
                                "name": "notifEmail",
                                "emailAddress": "[parameters('notificationEmail')]"
                            }
                        ],
                        "webhookReceivers": [
                            {
                                "name": "TeamsNotify",
                                "serviceUri": "[parameters('webHookUri')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithLessColumnsAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has less column(s) than the schema of the same source previously detected.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Current Schema Has Less Columns"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "USAFacts_Without_Sql_Sink",
                                                "USAFacts_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithMoreColumnsAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has more column(s) than the schema of the same source previously detected.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Current Schema Has More Columns"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "USAFacts_Without_Sql_Sink",
                                                "USAFacts_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert",
                    "location": "global",
                    "properties": {
                        "description": "It is to notify that the current schema of the source has same number of columns as the schema of the same source previously detected but either the arrangement of the columns is different or one or more columns have different names.",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "Alert Equal Number But Different Names Or Arrangement"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "USAFacts_Without_Sql_Sink",
                                                "USAFacts_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {   "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "type": "Microsoft.Insights/metricalerts",
                    "apiVersion": "2018-03-01",
                    "name": "DataTypeChangeAlert",
                    "location": "global",
                    "properties": {
                        "description": "Change in data type for one or more column(s) has been detected in the sql table",
                        "severity": 0,
                        "enabled": true,
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "allOf": [
                                {
                                    "threshold": 1,
                                    "name": "35d4fcba-be7c-43ab-b89e-c107b19258ce",
                                    "metricNamespace": "Microsoft.DataFactory/factories",
                                    "metricName": "ActivitySucceededRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [
                                                "Wait"
                                            ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [
                                                "WaitTrueChangedDataType"
                                            ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [
                                                "USAFacts_With_Sql_Sink"
                                            ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [
                                                "none"
                                            ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "timeAggregation": "Average",
                                    "criterionType": "StaticThresholdCriterion"
                                }
                            ],
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria"
                        },
                        "targetResourceType": "microsoft.datafactory/factories",
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlPipelineFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlPipelineCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlActivityFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlActivityCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity run cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlTriggerCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Trigger_Without_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "name": "USAFactsWithoutSqlTriggerFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for trigger failed runs",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Trigger_Without_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'No')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationWithoutSQL",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlActivityFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlPipelineFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlTriggerFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlTriggerCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlActivityCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithoutSqlPipelineCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithLessColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithMoreColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert')]"  
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF",
                        "USAFactsWithoutSqlPipelineFailedAlertConfig",
                        "USAFactsWithoutSqlActivityFailedAlertConfig",
                        "USAFactsWithoutSqlTriggerFailedAlertConfig",
                        "USAFactsWithoutSqlTriggerCancelledAlertConfig",
                        "USAFactsWithoutSqlActivityCancelledAlertConfig",
                        "USAFactsWithoutSqlPipelineCancelledAlertConfig"

                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlPipelineFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlPipelineCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlActivityFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON", "Create Schema if not exists" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "USAFacts_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlActivityCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "To Raw Partition", "To Raw Overwrite", "Reformat Columns", "JSONL to JSON LATEST", "JSONL to JSON", "Create Schema if not exists" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "USAFacts_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlTriggerFailedAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline trigger failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Trigger_With_Sql_Sink" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "name": "USAFactsWithSqlTriggerCancelledAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "USAFacts_Trigger_With_Sql_Sink" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('doYouWantToWriteCuratedDataToSQLDatabase'),'Yes')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationWithSQL",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('factoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlActivityFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlPipelineFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlPipelineCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlActivityCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlTriggerFailedAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'USAFactsWithSqlTriggerCancelledAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithLessColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithMoreColumnsAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'SourceCurrentSchemaWithSameNumberOfColumnsButDifferentNamesOrArrangementAlert')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'DataTypeChangeAlert')]"
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('factoryName')]",
                        "NotificationAlertFromADF",
                        "USAFactsWithSqlPipelineFailedAlertConfig",
                        "USAFactsWithSqlActivityFailedAlertConfig",
                        "USAFactsWithSqlActivityCancelledAlertConfig",
                        "USAFactsWithSqlPipelineCancelledAlertConfig",
                        "USAFactsWithSqlTriggerCancelledAlertConfig",
                        "USAFactsWithSqlTriggerFailedAlertConfig"
                    ]
                }

            ]
        }
    ],
    "outputs": {}
}